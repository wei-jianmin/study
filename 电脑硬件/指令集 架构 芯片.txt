● 指令集(ISA,instruction set architectrue)：
精简指令集(RISC) ：ARM v8 , MIPS
复杂指令集(CISC) ：x86 , x86-64
一种指令集就是一个生态圈，基于该指令集的软件越多，则该指令集越受欢迎。
业界除了x86和ARM、MIPS，其实还有一大堆各种各样的指令集。比如小型主机领域的Sparc、Alpha、Power等。
国内几家研CPU的科研机构就分别选择了x86、MIPS、Sparc、Alpha、ARM指令集。

● 微架构：
CPU厂商制造的CPU，可以使其支持多种指令集，但需要拿到‘指令集专利持有者’的授权
――――其实没有拿到某指令集的授权，在制造CPU的时候也可以兼容该指令集，只不过会被追责。
CPU厂商制造CPU内核时，一般使用自己的微架构，如Intel、高通、苹果、Nvidia等厂商都自行开发了兼容ARM指令集的微架构。
通常，业界认为只有具备独立的微架构研发能力的企业才算具备了CPU研发能力，而是否使用自行研发的指令集无关紧要。
微架构的研发也是IT产业技术含量最高的领域之一。
中科院设计的龙芯CPU，是自己研发的微架构，在设计之初就兼容MIPS指令集，后来买下该指令集的授权后，才能在市面上合法销售。
方德系统的兆芯CPU，兼容的是ARM64指令集，而银河的飞腾CPU，则兼容的是x86指令集。
微架构的设计影响核心可以达到的最高频率、核心在一定频率下能执行的运算量、一定工艺水平下核心的能耗水平等等。
此外，不同微架构执行各类程序的偏向也不同，例如90年代末期Intel的P6微架构就在浮点类程序上表现优异，但在整数类应用中不如同频下的对手。
常见的代号如Haswell（如因特尔的i7-4770就是使用的这种微架构）、Cortex-A15（Cortex是ARM公司研发并对外授权的微架构）等都是微架构的称号。

● 芯片：
过去的芯片仅仅包括CPU部分，如今大量的芯片集成了CPU、GPU、IO等多种不同的功能组件，此时这种芯片就不是传统意义上的“CPU”了。
将各种功能组件组装为芯片的技术含量相比微架构研发来说是较低的，因而业界能做此类工作的企业也数量较多。
在PC时代，几大主要的CPU研发厂商都只是自己研制微架构自己用。
到了智能设备时代，ARM公司的微架构授权模式兴起。ARM自己开发微架构后将它们上架出售，其他厂商可以拿这些核心组装为芯片来使用或销售。
典型如华为的海思920、三星Exynos 5430，就是“使用ARM Cortex-A15核心的芯片”，
而高通骁龙800、苹果A7等，则是使用的自主研发的兼容ARM指令集的微架构。