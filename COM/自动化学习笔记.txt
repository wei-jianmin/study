11.1 自动化对象基础
●  VARIANT数据类型：
因为自动化对象时跨语言的，所以它专门定义了一套数据类型VARIANT，所有的参数都得是这种类型，否则就不能很好的实现com对象的跨语言调用这一特性。
●  IDispatch接口：
该接口有4个成员方法，主要分为两类，前两个负责向com对象调用方反映类型库相关信息；后两个主要完成对com中所有其他方法的代理调用。
●  参数：
Object.Method(arg1,arg2,arg3)
{
	rgvarg;			-->  命名参数部分，arg3   arg2   arg1
	rgdispidNamedArgs;	-->  命名参数对应ID
	cArgs;			-->  参数数据长度
	cNamedArgs;		-->  命名参数个数
 }DISPPARAMS;

11.2 自动化对象实现
●  实现模型一：
类型库支持（对应前两个方法）：
主要借助OLE提供的相关API实现，借助类型库文件，实现支持ItypeInfo接口的内部com对象（类型信息对象）。
Invoke及GetIDsOfNames实现：
GetIDsOfNames，简单的可用查表发或switch分支语句，除此之外，也可以用类型信息对象实现。
●  实现模型二：
用CreateStdDispatch方法实现自动化接口，此方法采用的是聚合模型，用该方法在组件内部创建一个自动化对象，然后将之当做自己的接口。CreateStdDispatch同样是依据类型库的，所以它和上面一样，在Invoke方法用通过类型库，可以知悉com组件所实现的一切自定义方法和属性。

11.3 自动化对象应用
●  双接口
在实现IDispatch接口的基础上，把方法和属性函数也以接口成员函数（纯自动化对象会把方法和属性只声明为类成员，而不再接口方法中体现），这样就形成了双接口，采用双接口，可使某些支持指针操作的语言在调用com对象方法时，直接利用IUnknown接口调用接口方法，提高效率。
● 迟绑定与早绑定
早绑定：编译器通过分析类型库，在调用Invoke方法之前就得到了所有方法和属性对象的ID;
迟绑定：用GetIDsOfNames方法获取方法和属性对象的ID;