建造者模式
建造者模式适合于建造比较复杂的对象，
如建造汽车对象包括方向盘，车门，轮胎，发动机，底座等等，
如果把这些东西都放在一个构造函数中，则这个构造函数会非常复杂且容易出错。
所以汽车产品相对适合于把各个零件的构造分成不同的创建函数，然后再创建个汽车厂生产对象。
再有一个例子就是套餐，像如套餐a套餐B等，
厨师可以创建炸鸡腿，炸鸡翅，炸鸡柳等，
服务员就相当于建造者，可以构建套餐a套餐B等对象。
在很多游戏软件中，地图包括天空、地面、背景等组成部分，
人物角色包括人体、服装、装备等组成部分，
可以使用建造者模式对其进行设计，通过不同的具体建造者创建不同类型的地图或人物。

------------------------------------------------------------

原型模式
圆形模式类似于拷贝构造函数，但又有所不同。
用户使用一个对象时，往往只持有这个对象的接口，而不知道这个对象真正的类名叫什么，
所以这时候是没法new出还对象的，这时候原型模式的价值就体香出来了。
原型模式创建出的新对象，并不是一个纯新的对象，否则用工厂也能，
而是和当前对象具有完全一样的状态。

------------------------------------------------------------

工厂模式
工厂模式的目的就是想把建造对象和使用对象分开，为什么要这样做呢？
因为用户要建造这个对象，就意味着必须要知道这个类的定义，
而现实是，我们只想把类的接口暴露给用户。
让用户包含产品类的头文件，还有个坏处就是，
假设用户和产品在不同的动态库中，
当产品类中增加一个新的变量时，用户类所在的动态库就不得不重新编译。