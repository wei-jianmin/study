环境类 持有抽象策略类的接口，从而可以<聚合> 不同的具体策略类，
环境类按固定的规则调用策略类的不同方法

举例：
oes使用的框架中就使用了策略模式，
所有的模块类，继承自 ?IFuncModule?，都有OnStart，OnInit，OnUnInit，OnEnd方法
环境类不管传入哪个模块类，都是按OnStart->OnInit 和 OnUnInit->OnEnd的方法调用

特点：
不同的类（策略类），具有相同的外部表现（继承同样的接口）和使用方式
辅助类（环境类）帮助完成按一定的顺序调用策略类的各个接口。

===========================================================================

如对一个数组进行排序，有不同的排序算法，如快速排序、冒泡法、选择排序、二叉树排序等
根据环境或条件的不同，选择不同的排序方法。
可以让这些不同的算法对象，都继承自同一个排序接口ISort，
对数组对象支持sort方法，传入ISort* psort参数，调用psort->sort()，
这种设计模式就是策略模式

简而言之，策略模式就是 “让不同的实现方案继承同样的接口”

其主要缺点如下。
客户端必须理解所有策略算法的区别，以便适时选择恰当的算法类。
策略模式造成很多的策略类，增加维护难度。

环境类（或称上下文类）
当用户使用策略类的时候，通常并不是直接 
  策略接口 = new 策略类; 
  策略接口 -> 接口方法();
这样使用，而是
  策略接口 = new 策略类;
  环境接口 = new 环境类(策略接口);
  环境接口 -> 接口方法();
这是因为，通常用户调用策略方法时，并不是简单调用了策略接口方法后，就能达到目的，
而是在调用策略接口方法前后，还要进行一些其它操作，这些操作是共同的，不因策略而改变，
所以一般将这些上下文共同代码放到环境类中完成： 
环境类的函数中，执行特定的上下文操作，并在合适的位置调用策略接口的方法，最终返回用户想要的功能
如果使用了环境类，用户甚至无需对策略接口有所了解，无需知道策略接口的使用方法，
而只需知道环境类的使用方法（接口函数用法）即可，而环境类接口的方法使用可以设计的更人性化。

适用场景：
对同一需求（继承同一策略接口）有不同的实现方案（多种策略实现类）
场景类在一定程度上，是一个策略调用辅助类