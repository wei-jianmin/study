访问者模式的设计特点：
1. 将对数据结构的维护和对数据的处理分离开来――放在不同类中实现。
2. 数据维护类支持accept(DealerImpl)方法，用与主动接受访问
   数据处理类支持visit(DataImpl)方法，用与完成对数据的访问与处理
3. 在用户使用时，创建数据维护对象和数据处理对象，
   然后调用数据维护对象的accept方法，并把数据处理对象作为参数传入，
   从而完成对数据的处理。在这里面，数据维护类是主体，是主动的，
   而数据处理类是工具，是被动的。

访问者模式提现了以数据为中心的设计思想，对数据的处理也是由数据对象主动发起的，处理工具类只作为参数。
这样的设计，思路更清晰。

维护数据结构：存储数据结构，并提供对数据结构的基本操作方法（获取数据、修改数据）
处理数据结构：与业务、功能相关

优缺点：
这种设计模式，容易扩展处理类，但不同意扩展数据维护类，新增加一个数据维护类，则意味着每个处理都需要提供对新数据维护类的支持（体现在accept方法参数需要支持新的DealerImp）。所以该模式适用于数据结构比较稳定的系统。

===================================

电视台（作为组织者）打算出一部关于“健康教育”方面的片子，
所以他请来了 {健康专家图} 和 {记者团}

健康专家团作为受访者，有饮食(Diet)健康、运动(Sport)健康两方面的专家。
健康专家团继承IRespon接口，IRespon接口中有accept方法。

专家可以主动邀请记者发起提问(调用accept方法)，
专家需要把自己的身份告诉记者，是饮食专家还是健康专家 
void accept(IVisit v)  //v用于指明要哪个记者进行访问
    v.visit(this);     //this是把自己的身份告诉记者，记者判断是那方面的专家
附注：每个专家身边都有一个问题牌，表明自己可以回答这些问题（该类支持的访问方法）

记者团（可以有一个或多个记者）要准备饮食健康和运动健康两个方面的问题
记者团继承IVisit接口，接口中有 visit(Diet*) 和 visit(Sport*) 两个方法
并在visit方法中，根据(邀请访问的)专家前面的问题牌进行提问

这个例子中，添加新的记者是比较方便的，只要他准备饮食和运动两方面的问题即可，
不会对其它的记者对象或现有的专家造成影响，
但如果添加新的专家，如作息健康专家，则会对所有的记者类有影响

点评：
这里的专家类，实际就是数据类， 数据类可以提供对数据读取的方法，也可以提供对数据进行修改的方法
而例中的记者类，实际就是操作类， 操作类可以操作数据，包括读数据/写数据。   

-----------------------------------------------

tinyxml的printer类，就是使用的访问者模式
节点类中有数据，将printer设为访问者后，就会自动触发printer的访问方法，printer放问节点，把里面的数据读进来。