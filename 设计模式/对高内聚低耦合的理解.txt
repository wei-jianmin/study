高内聚低耦合，描述的是模块与模块间的关系
耦合很好理解，就是指相互之间的关系
内聚，从字面意思，指的是内部凝聚，自给自足。

一个类的各个函数可算作不同的模块，从这一角度看高内聚低耦合，指的是一个类的各个函数间（公有方法）应该尽量减少依赖，
避免在调用一个函数前，需要先调用另外另外一个函数，而是每个公有函数都是一个独立的功能。
这是因为各个函数之间关系越强，则意味对于使用者而言，这个类越难理解并使用。
即使这个类你自己使用，一定时间以后，你对这个类的实现也会忘光，就跟使用别人的类一样。

一个类也可算作一个模块，从这一角度看高内聚低耦合，
●为了使类便于理解使用，各个类应尽量做到功能独立：
一个类可以独立的完成一个/一类功能。
●而为了便于类的维护，则各个类之间应减小依赖，
通俗的说，就是避免使用继承、组合、传参等方式直接引用另一个类，
这是因为如果被引用的类做了改动，如增加了成员变量，则所有与之有关系的类都将受到影响，
解决办法是使用接口。

一个模块也可以表示多个类的集合，多个类共同组成一个功能模块，
从这一角度看，对高内聚低耦合的要求更高
一个模块如果需要依赖另一个模块才能工作，这是很难接受的，
但现实又很难避免这种情况，如图像处理模块，通常会用到数学模块，
所以为了应对这种情况，提出了分层的理念，某些模块处在低层，某些模块处于高层，
避免同一层次上模块间的相互调用，但高层模块允许依赖低层模块。


最后，高内聚低耦合，有时过犹不及，而应该把握一个合适的度。