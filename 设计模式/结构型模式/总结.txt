适配器模式：分 类适配器 和 对象适配器，根本目的是想<改变>接口形式。

装饰模式： 装饰类和被装饰类继承同样的接口，所以对外行为表现一致， 装饰类聚合了被装饰类，并在方法内调用被装饰类的相应方法，并<丰富>该方法。

代理模式： 代理类组合了被代理类，代理类的功能实现，<主要>是靠调用被代理类的各个方法完成的，目的在于对客户<屏蔽>被代理类。

外观模式： 外观类通常会维护多个不同的子类对象（常称为子系统类），维护的方式可能是组合，也可能是局部对象变量，通过合理有序的调用各个子系统的方法，完成最终的目的。外观模式的主要目的在于<简化>对各个子系统的分别使用。

桥接模式： 桥接模式有两种应用方向，一种是将不同维度的功能分段并连接，一种是将具体与抽象分离并连接。
           对前半句话的解释为：一个复杂的类，可能在多个维度上变化，且在一个维度的变化不影响其它维度，如外观和功能，此时可将不同维度的功能拆分成不同的类，并通过组合的方式进行级联。
           对后半句话的解释为：不是将功能类继承的接口直接暴露给客户，而是在接口类的实现类中，通过组合或聚合的方式，代理调用功能类，从而可以让接口类和功能类可以互不影响，独立变化。
           
享元模式： 将各个类中相同的操作或相同的数据成员放到一个公共类中完成

组合模式： 树枝和叶子实现统一的接口（可称为元素接口），树枝类中包含元素接口的数组
           

适装代外四种模式的共同点是：已经有线程的功能对象（里面封装了具体的业务功能），然后将这个功能对象<包装>成另一种形态提供给用户。其目的，或是为了丰富函数功能，或是为了隐藏接口，或是为了适配接口，或是为了简化接口。他们都是在功能对象已经建好后，才开始介入的。

桥接、享元和组合模式，在功能类还没建立好之后，就开始介入了，他指导应该怎么建立功能类。
