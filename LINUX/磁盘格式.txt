分区和卷
    分区
        磁盘必须分区后才能使用，即使整个磁盘只有一个分区
        从“分区”的属性看，有主分区、逻辑分区、逻辑驱动器(逻辑分区)三种：
            一版磁盘上最多只能有4个主分区，或者最多3个主分区+1个扩展分区
            扩展分区是一种特殊的主分区，不可用直接使用，而是应该分成一个或多个逻辑分区
            逻辑分区不能独立存在，而只能存在于扩展分区里面。
            主分区最少1个，逻辑分区最多1个，主分区+扩展分区总共最多4个，逻辑分区则可以有若干个
        主分区+逻辑分区构成的逻辑磁盘称为卷或驱动器
        激活的主分区会称为“引导分区/启动分区”
    基本磁盘和动态磁盘
        磁盘有多种工作模式，在普通模式下运行时，专业上称它为“基本磁盘”，通常家用计算机都运行在“基本磁盘”模式
        除了“基本磁盘”模式，磁盘还能工作在“动态磁盘”模式，基本和动态磁盘可以进行转换，一版都用基本磁盘。
        有基本磁盘转为动态磁盘模式比较简单，而从动态磁盘转为基本磁盘则必须删除磁盘上的所有分区后再进行转换。
        动态磁盘的特点是磁盘容量可以动态调整，不会丢失数据，一个卷可以包容多个物理磁盘。
        基本磁盘转换为动态磁盘后，原来的分区都会自动转换为“简单卷”。
        右键我的电脑，选择管理，再选磁盘管理，在此界面，可以查看磁盘是基本磁盘，还是动态磁盘  
    卷
        “基本磁盘”模式下，卷和分区是没有区别的，两种表达同一个意思，此时的卷称为简单卷。
        卷只能存在于动态磁盘中，有5种：简单卷、跨区卷、带区卷、镜像卷、RAID-5卷。
        简单卷
            动态磁盘的基本单位，简单卷可以持有的文件系统有：FAT、FAT32、NTFS。
            NTFS可以扩展（就是增加简单卷的容量），扩展部分可以是同一磁盘未指派空间，
            也可以是不同磁盘未指派空间，FAT/FAT32不能扩展。
        跨区卷
            数个不同此磁盘的未指派空间组成的一个逻辑卷。
            跨区卷存储数据按顺序存储，某一部分出错，则所有数据出错，磁盘利用率100%。
        带区卷
            和跨区卷类似，都是可以将多个部分分配在多个磁盘，
            区别在于跨区卷的各部分可以是大小不同的，而带区卷的各部分大小是一致的。
            而在存储的时候，系统时把数据以64K为单位轮询存储的。
        镜像卷
            一个动态盘的简单卷 + 另一个动态盘的未指派空间 ； 
            或者两个动态盘的未指派空间， 二者组合成一个镜像卷。
            镜像卷的两个部分大小完全相同，
            当简单卷和另一个磁盘的未指派空间组成镜像时，系统会将简单卷的现有数据拷贝到另一个成员中。
            数据存储时，同时存储在镜像卷的两个部分中，这样一个磁盘故障后，另一个磁盘仍然可用。
        RAID-5卷
            将3个或3个以上（<32）的动态磁盘未指派空间，组合成一个逻辑卷，然后赋予同一个驱动器号。
            RAID-5卷的每个成员的大小相同。
            单个磁盘利用率 (n-1)/n 。 写速度小于对单个磁盘的写入(多了奇偶校验的写入)，读快(并行读取)。 具有容错能力。
            除RAID5之外，还有RAID0,RAID1,RAID2,RAID3,RAID4,RAID6,RAID10d等。
            什么是RAID
                RAID全称是独立磁盘冗余阵列（Redundant Array of Independent Disks），
                基本思想是把多个磁盘组合起来，组合一个磁盘阵列组，使得性能大幅提高。
                最初是为了组合小的廉价磁盘来代替大的昂贵磁盘，
                同时希望磁盘失效时不会使对数据的访问受损失。
                实现RAID的方式可分为软件RAID和硬件RAID，软件RAID的性能较低，借助RAId软件实现，
                硬件RAID有专用的RAID控制器（PIC扩展卡，可接多个磁盘）。
                RAID可以充分发挥出多块硬盘的优势:
                    可以提升硬盘速度，增大容量，提供容错功能够确保数据安全性，易于管理的优点，
                    在任何一块硬盘出现问题的情况下都可以继续工作，不会受到损坏硬盘的影响
                RAID0
                    RAID0称为条带化存储，将数据分段存储在各个磁盘中，
                    读写均可以并行处理，因此读写速率为单个磁盘的N倍
                    特点：
                        最少需要两块磁盘
                        数据条带式分布
                        没有冗余，性能最佳(不存储镜像、校验信息)
                        不能应用于对数据安全性要求高的场合
                RAID1
                    RADI1是镜像存储，没有数据校验，
                    数据被同等的写入到2个或者多个磁盘中，写入速度相对慢， 但是读取速度比较快。
                RAID4
                    RADI4在RAID0的基础上，N个盘用于数据存储，另外加入了1个磁盘作为校验盘。
                    一共N+1个盘，任何一个盘坏掉也不影响数据的访问
                    校验信息为奇偶校验，每存储 N比特 的数据信息，产生 1比特 的校验信息
                RAID5
                    RAID5在RAID4的基础上，由原来的一个盘来存储校验数据，改为每个盘都有数据和校验信息的
                    特点：
                        最少3块磁盘
                        数据条带形式分布
                        以奇偶校验作冗余
                        1个盘存校验，其他盘存数据
                        适合多读少写的情景，是性能与数据冗余最佳的折中方案
NTFS格式
    NTFS有引导扇区、主文件表、系统文件、文件存储区4个部分组成
    在NTFS中，文件按簇存储，簇为扇区的2^N倍，簇的大小在格式化时，根据卷的大小自动分配。
    NTFS使用逻辑簇号（LCN，logicalcluster number）和虚拟簇号（VCN，virtualcluster number）对簇进行定位，
    逻辑簇号按顺序编号，因此卷大小*LCN，得到卷的物理偏移量。 
    vCN则是对特定文件的簇，从头到尾顺序编号，方便引用文件中的数据。
    分区引导扇区
        在操作系统引导的过程中，分区引导扇区起着很重要的作用，其中存储着和卷文件相关的结构信息和启动引导程序等。
        操作系统在建立文件系统时，生成的BPB参数记录着NTFS系统中的很多重要信息，
        包含了每簇扇区数、分区的扇区总数、MFT的起始逻辑簇号、文件系统标识等信息。
        在NTFS中，分区上的所有数据都是以文件的形式存储的。
    主文件表（MFT）
        主文件表MFT在NTFS文件系统中处于最核心、最重要的地位，通过MFT可以确定所有文件及目录在磁盘上的详细存储位置。
        主文件表由一系列文件记录组成，是一个与文件对应的数据库，(卷中的每一个文件都对应着一个文件记录)
        其中的第一个文件记录是基本文件记录，它主要存储着其它扩展文件记录的一些详细信息。
        MFT文件记录数组中的文件记录在物理上是连续的，并且都是从0开始编号。
        MFT仅供系统自身构架、组织文件系统使用，被称作元数据。
        所有的元文件名字都是以“$”开始，其都是隐藏文件。
        MFT表中的前16个元数据是最重要的。
        为了防止数据的丢失，在卷存储区中，NTFS系统对它们进行了备份
        c++调用DeviceIoControl系统API读取MFT的例子 : https://blog.csdn.net/problc/article/details/5971825
    NTFS文件属性
        NTFS使用属性储存所有的文件和目录信息。属性包括：属性表头和属性数据
        表头储存属性的类型、名字和标志，记录着属性数据的位置
        MFT中的记录由一个包含关于记录的基本信息的小表头和紧跟着的一些属性组成，
        这些属性用于描述记录所对应的文件或目录的数据或特性。
        NTFS将在MFT记录里面直接储存属性数据。存储在MFT记录中的属性称为常驻属性，其它的称为非常驻属性。
        只有当记录表头、属性表头、属性数据都能放入一个记录时，属性才能是一个常驻属性
        因此，1KB（通常的MFT记录大小）是NTFS磁盘上的属性数据长度的上限。
        如果属性的数据是常驻的，属性表头将指向在MFT记录中的数据的位置。
    文件删除
        当文件被彻底删除后，系统会将其主文件表MFT记录收回，并加上删除标记
        同时将该文件所占用的数据区也一并收回，并把$Bitmap元文件中簇的表示信息使用清空，在对应位置上设为0
        NTFS系统中的文件在删除后，其原先的数据空间如果没有被新的数据所覆盖的话，
        只要FILE记录还存在，则将很容易找到文件数据的详细存储位置，并能将这些数据准确的恢复出来
        如果删除的文件包含在其他文件夹中，那么文件被删除后，该文件夹也要将该文件的目录项删除
    NTFS的目录
        从外部结构看，NTFS组织目录的方式和FAT一样（其他许多文件系统也是如此），
         即所谓的多级（hierarchical）模型或目录树（directory tree）模型
         在根目录里，存储了指向其他文件或目录的引用，每个子目录里又可以有任意的文件和目录，这样就形成了一个树状结构。
         虽然NTFS里目录树的结构与FAT的类似，它们内部的管理却不同:
            其中一点是，FAT里目录包含了其下文件的所有额外信息，文件本身只包含数据。
            而在NTFS里，文件就是属性的集合，会自己包含需要的描述信息和数据。
            目录同样只包含自己的信息，而不用管其下的文件。
        NTFS里的所有对象都是文件，这也适用于目录,每个目录在MFT里都有一个记录。
        NTFS使用一种特殊的方式来存储目录下的文件索引
            在FAT文件系统里，这些索引是一个链表，前几个索引存储于第一个簇里，接着存储于第二个簇，等等。
            这种方案实现容易，但需要扫描整个链表才能找到一个文件，导致定位单个文件非常耗时，特别是很大的目录。
            为了提高性能，NTFS使用了B树结构。从实践效果看，B树能使目录的索引“自动排序”，
            这在加入新文件的时候会带来一些花费。但是文件的搜索现在性能大大提升了，特别是对于大目录。
    NTFS的文件
        在NTFS里，文件是属性的集合，文件的数据也是属性之一，术语叫做“data”属性。
        NTFS下的属性类型：驻留的和非驻留的。
        NTFS里文件的存储方式依赖于文件的大小
        所有文件的核心结构都基于： 文件头（结构和目录头一样）、标准属性（目录也有此结构）、文件内容、安全描述（目录也有此结构）
        除了这些基本属性，一个文件可以有很多其他属性。
        如果一个文件的所有属性能放进一个MFT记录，那么这个文件就全部在MFT记录里。
        如果文件太大，NTFS把一部分属性移出MFT记录，转化成非驻留的。
        文件的data属性里包含了数据范围的起始簇标识，和簇的个数。
        
ext4
    https://blog.csdn.net/weixin_36110344/article/details/112588660
    EXT4格式的存储设备上除了引导块和超级块以外，还有索引节点(index node，代码中用作inode)和数据块。
    其中引导块占据第一个记录块
    超级块占据第二个记录块
        一是保存了文件系统的大小以及所用块的大小;
        二是保存了可用数据库的数量和部分可以及时分配的空闲数据块列表;
        三是最近一次的更新时间与文件系统的状态;
        四是空闲Inode结点的个数和部分可以及时使用的inode结点列表
        当操作系统启动后，系统内核会把超级块中的内容复制到内存中，
        并周期性的利用内存里的最新内容去更新硬盘上的超级块中的内容。
        由于这个更新存在 一个时间差，为此内存中的超级块信息与硬盘中的超级块信息
        往往只有在开机与关机的某个特定时刻是同步的;而在其他时间都是不同步的.
        超级块记录了诸如该硬盘(或分区，每个分区都是一个逻辑硬盘)上总的block数目，
        总的inode数目，第一个数据块编号，块大小，挂载次数等等各种信息。
        超级块的格式是固定的，系统初始化时要将一个存储设备(通常就是从中引导出操作系统image的那个设备)作为整个系统的根设备，
        它的根目录就是整个文件系统的根，即总所周知的“/”。
        有了根目录，才能依次把其他文件mount到根目录下的空闲目录上。
        刚开始从一个设备上读入超级块时，首先在内存中建立一个super_block数据结构，
        由于文件系统初期只有“/”是空闲，因此只能将根设备的根目录安装于此。
        在给定一个路径的情况下，可以从“/”依次向下查找，
        这样很麻烦，因此才有了pwd这个数据结构代表进程当前所在目录，并提供了一种使用相对目录来查找的方法。
        Dentry数据结构中有成员struct dentry *d_parent表示当前目录的父目录(即shell中的”../”)的dentry，
        同时struct list_head d_child还记录的当前目录的同级目录链表，以及struct list_head d_subdirs表示当前目录的子目录链表。
