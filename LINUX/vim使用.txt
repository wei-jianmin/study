文件查看
    sp/vsp  [文件名]  分屏打开
    ctrl + w + w  ： 在分屏间自动切换
    vim +n filename   打开文件并跳到指定行
    vim +n filename   打开文件并跳到最后一行
    vim -o2 1.txt 2.txt 以水平方向分割2个窗口的方式打开
    vim -O2 1.txt 2.txt 以垂直方向分割2个窗口的方式打开
    vim -d test.txt test2.txt：
        使用Vim同时打开 test.txt 和 test2.txt 两个文件并diff两个文件的差异
        被diff的两个文件中连续相同的行将被折叠起来
        默认Vim配色下，只在某一文件中存在的行以蓝色背显示，
        而在另一文件中的对应位置将显示绿色；
        两个文件中都存在但包含差异的行会以粉色背景显示，
        而引起差异的文字将用红色背景突出显示
        
字符串查找
/abc	从光标所在位置向前查找字符串 abc
?abc	从光标处开始查找字符串 abc
/^abc	查找以 abc 为行首的行
/abc$	查找以 abc 为行尾的行
/\<abc  查找以 abc 开头的词
/abc\>  查找以 abc 结尾的词
/abc\c  查找abc，忽略大小写
/[ab]c  查找ac或bc
:set ic 所有查找忽略大小写
高级的查找替换就要用到正则表达式。
\d: 表示十进制数（我猜的）
\s: 表示空格
\S: 非空字符
\a: 英文字母
\|: 表示 或
\.: 表示.
{m,n}: 表示m到n个字符。这要和 \s与\a等连用，如 \a\{m,n} 表示m 到n个英文字母。
{m,}: 表示m到无限多个字符。
**: 当前目录下的所有子目录。
:help pattern得到更多帮助。

字符替换
r	替换光标所在位置的字符，只替换一个字符
R	从光标所在位置开始替换字符（跟a、i、p等命令类似）
:s/a1/a2/g	将当前光标所在行中的所有 a1 用 a2 替换,
:n1,n2s/a1/a2/g	将文件中 n1 到 n2 行中所有 a1 都用 a2 替换
:%s/a1/a2/g	将文件中所有的 a1 都用 a2 替换
注：
 s是substitute的简写
 最后的g是替换标志， 其它替换标志还有： 
     i表示大小写不敏感查找，
     I表示大小写敏感
     c表示需要确认
     没有替换标记（包括前面的/）时，只替换第一个
 /为分隔标志，但不必非得是/，也可以是其它符号
 如：:%s#freetype/src/##g，可以将像如 freetype/src/base/fttype.c 替换为 base/fttype.c

设置支持鼠标滚轮
:set mouse=a

设置支持语法高亮
:syntax on

vim初始化配置文件：
~/.vimrc

翻屏
ctrl+f: 下翻一屏。
ctrl+b: 上翻一屏。
ctrl+d: 下翻半屏。
ctrl+u: 上翻半屏。
ctrl+e: 向下滚动一行。
ctrl+y: 向上滚动一行。

插入
技巧： 
按8(任意数字)，再按i进入插入模式，再输入=(任意字符)， 按esc退出插入模式 
就会插入8个=，这在插入分割线时特别方便

复制粘贴
y[n]w: 复制一(n)个词。
y[n]l: 复制光标右边1(n)个字符。
y[n]h: 复制光标左边1(n)个字符。
d[n]w: 删除（剪切）1(n)个单词
d[n]l: 删除（剪切）光标右边1(n)个字符。
d[n]h: 删除（剪切）光标左边1(n)个字符。

文件的编码
:e ++enc=utf8 filename, 让vim用utf-8的编码打开这个文件。
:w ++enc=gbk，不管当前文件什么编码，把它转存成gbk编码。
:set fenc或:set fileencoding，查看当前文件的编码。
在vimrc中添加set fileencoding=ucs-bom,utf-8,cp936，vim会根据要打开的文件选择合适的编码。 
注意：编码之间不要留空格。 cp936对应于gbk编码。 ucs-bom对应于windows下的文件格式。

标记
m{a-z}: 标记光标所在位置，局部标记，只用于当前文件。
m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。
`{a-z}: 移动到标记位置。
'{a-z}: 移动到标记行的行首。
`{0-9}：回到上[2-10]次关闭vim时最后离开的位置。
``: 移动到上次编辑的位置。''也可以，不过``精确到列，而''精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。
`": 移动到上次离开的地方。
`.: 移动到最后改动的地方。
:marks 显示所有标记。
:delmarks a b -- 删除标记a和b。
:delmarks a-c -- 删除标记a、b和c。
:delmarks a c-f -- 删除标记a、c、d、e、f。
:delmarks! -- 删除当前缓冲区的所有标记。
:help mark-motions 查看更多关于mark的知识。

宏
. --重复上一个编辑动作
qa：开始录制宏a（键盘操作记录）
q：停止录制
@a：播放宏a

撤消与重做（normal模式）
[n] u: 取消一(n)个改动。
:undo 5 -- 撤销5个改变。
:undolist -- 你的撤销历史。
ctrl + r: 重做最后的改动。
U: 取消当前行中所有的改动。
:earlier 4m -- 回到4分钟前
:later 55s -- 前进55秒

关闭退出
:qall -- 关闭所有窗口，退出vim。
:wall -- 保存所有修改过的窗口。
:only -- 只保留当前窗口

分割窗口后调整窗口大小
vim -o file1 file2:水平分割窗口，同时打开file1和file2
vim -O file1 file2:垂直分割窗口，同时打开file1和file2
:sp [新文件名] -- 把当前窗水平分割成两个窗口
:vsp [新文件名] -- 把当前窗口分割成水平分布的两个窗口。
ctrl+w + --当前窗口增高一行。也可以用n增高n行。
ctrl+w - --当前窗口减小一行。也可以用n减小n行。
ctrl+w _ --当前窗口扩展到尽可能的大。也可以用n设定行数。
:resize n -- 当前窗口n行高。
ctrl+w = -- 所有窗口同样高度。
n ctrl+w _ -- 当前窗口的高度设定为n行。
ctrl+w < --当前窗口减少一列。也可以用n减少n列。
ctrl+w > --当前窗口增宽一列。也可以用n增宽n列。
ctrl+w | --当前窗口尽可能的宽。也可以用n设定列数。

多标签编辑
vim -p files: 打开多个文件，每个文件占用一个标签页。
:tabe[dit], tabnew -- 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。
^w gf -- 在新的标签页里打开光标下路径指定的文件。
:tabn -- 切换到下一个标签。Control + PageDown，也可以。
:tabp -- 切换到上一个标签。Control + PageUp，也可以。
[n] gt -- 切换到下一个标签。如果前面加了 n ， 就切换到第n个标签。第一个标签的序号就是1。
:tab split -- 将当前缓冲区的内容在新页签中打开。
:tabc[lose] -- 关闭当前的标签页。
:tabo[nly] -- 关闭其它的标签页。
:tabs -- 列出所有的标签页和它们包含的窗口。
:tabm[ove] [N] -- 移动标签页，移动到第N个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。

寄存器
a-z：都可以用作寄存器名。"ayy把当前行的内容放入a寄存器。 注意：前面有个"
A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如"Ayy把当前行的内容追加到a寄存器中。
:reg 显示所有寄存器的内容。
""：不加寄存器索引时，默认使用的寄存器。
"*：当前选择缓冲区，"*yy把当前行的内容放入当前选择缓冲区。
"+：系统剪贴板。"+yy把当前行的内容放入系统剪贴板。  适合在不同vim文件之间粘贴复制

更多技巧：
https://www.cnblogs.com/codehome/p/10214801.html