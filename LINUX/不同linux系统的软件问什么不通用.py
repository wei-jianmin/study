内核 vs 系统
    内核提供文件管理、内存管理、cpu管理、网络通信、设备驱动程序等基础功能。
    系统涵盖了内核，但还提供了与用户交互的能力（桌面系统/命令行）以及一些系统级的管理工具和服务。
    linux中如bash、ifconfig、mount、cat、reboot、rm、cat、vim等，属于系统，而不属于内核。
    
linux动态库依赖版本问题
    命名规范（建议性，但不是强制性）
        首先是共享库本身的文件名：共享库的命名必须如 libxxx.so.x.y.z
        x是主版本号，y是次版本号，z是发布版本号
        主版本号(Major Version Number)：
            重大升级，不同主版本的库之间的库是不兼容的。
            所以如果要保证向后兼容就不能删除旧的动态库的版本。
        次版本号(Minor Version Number): 
            增量升级，增加一些新的接口但保留原有接口。
            高次版本号的库向后兼容低次版本号的库。
        发布版本号(Release Version Number)：
            库的一些诸如错误修改、性能改进等，不添加新接口，也不更改接口。
            主版本号和次版本号相同的前提下，不同发布版本之间完全兼容。
    严格遵守上述规定，能避免动态库因为版本冲突的问题
    在程序加载或运行的时候，动态链接器是如何知道程序依赖哪些库，如何选择库的不同版本
        Solaris和Linux等采用SO-NAME( Shortfor shared object name )的命名机制
        来记录共享库的依赖关系。
        每个共享库都有一个对应的“SO-NAME”(共享库文件名去掉次版本号和发布版本号)。
        比如一个共享库名为libtest.so.3.8.2,那么它的SO-NAME就是libtest.so.3。
        在编译生产ELF文件时候，如果文件A依赖于文件B，
        那么A的链接文件中的”.dynamic”段中会有DT_NEED类型的字段，字段的值就是B的SO-NAME。
        这样当动态链接器进行共享库依赖文件查找时，
        就会依据系统中各种共享库目录中的SO-NAME软连接自动定向到最新兼容版本的共享库
        
自制操作系统
    GRUB
        GRUB（简称“GRUB”）是一个来自GNU项目的启动引导程序 
        引导装载程序是计算机开机自检完成后装载操作系统或者其他系统软件的计算机程序
        自检完成后运行引导装载程序，然后再加载并运行软件
        在普通的个人电脑上，引导程序(boot loader)通常分为两部分
        第一阶段引导程序位于主引导记录（MBR），
        用以引导位于某个分区上的第二阶段引导程序，如NTLDR、BOOTMGR和GNU GRUB等。
        BIOS引导完成后，bootloader就接手初始化硬件设备、创建存储器空间的映射，
        以便为操作系统内核准备好正确的软硬件环境。
        但是随着计算机操作系统越来越复杂，位于主引导记录的空间已经放不下引导操作系统的代码，
        于是就有了第二阶段的引导程序，
        而MBR中代码的功能也从直接引导操作系统变为了引导第二阶段的引导程序。
        对于UEFI系统，由EFI应用程序（即EFI系统分区中的.efi文件）取代MBR和第二阶段引导程序，
        UEFI固件会加载引导程序的.efi文件，再由引导程序加载操作系统。
    
        