#! /bin/bash
#-----------------------------------------平台相关--------------------------------------

export svn_path=/data0/svn
export svn2_path=/diskE/svn2
export svn_path2=/diskE/svn2
export wjm_path=/diskE/wjm

#-----------------------------------------平台无关--------------------------------------
userdir=$1

#显示帮助
alias hlp='func_help'				    # 列出自定义的命令,大多数命令都支持 -? 参数以获取命令帮助

#命令简写
alias c="source /temp/_visual_change_dir.sh"        # 使用类似于cd，但提供比cd更直观的显示效果
alias l='ls -lha --time-style="+%Y/%m/%d %H:%M"'    # 类似于ls -l,默认按名字排序，-t按时间排序，-S按大小排序，-r反向排序
alias var='export'				    # 同 export
alias hi='history'				    # 同 history
alias fs='du -hd 1'				    # 同 du -hd 1,列出当前目录下各个文件夹的名字及大小
alias telopen='func_telopen'                        # 同 export DISPLAY=参数1:0
alias js='jobs'					    # 同 jobs

#目录管理
alias m='mem_data_func'                             # 目录跳转命令，输入 m -? 获得详细帮助
alias mc='mem_data_cd_func'                         # 跳转到变量目录，使用-?获取帮助
alias mm='mem_data_func2'                           # 快速存储当前目录，使用-?获取帮助
alias ml='mem_data_list_func'                       # 显示指定变量所记录的目录，使用-?获取帮助
alias mx='mem_variant_export'                       # 将 m 记录的变量导出为全局变量，使用-?获取帮助
alias remdir='export lastdir=`pwd`'                 # 将当前路径记录为变量 lastdir，不支持-?获取帮助
alias remd='export lastdir=`pwd`'                   # 同 remdir，不支持-?获取命令帮助
alias up='func_updir'                               # 后跟数字，表示上跳n级目录，使用-?获取帮助
alias upto='func_uptodir'                           # 后跟字符串，表上跳的字符串匹配的目录，使用-?获取帮助
alias up2='func_uptodir'                            # 同 upto，使用-?获取帮助

#屏幕输出
alias cls='printf "\033c"'                          # 清屏
alias pl='printLine2'                               # 输出分割线，输入-?获取更多帮助

#高级功能
alias testload='func_call_test_load_so'             # 测试加载动态库，输入-?获取更多帮助
alias lookder='func_look_cert DER'                  # 查看证书，输入-?获取更多帮助
alias lf='func_list_func'		            # 列出文件中的函数位置，输入-?获取更多帮助

#文件管理
alias sfp='func_push_file' 			    # stack file push，使用-?获取使用帮助
alias sfg='func_pop_file'   			    # stack file get，使用-?获取使用帮助
alias sfl='func_show_file'  			    # stack file list，使用-?获取使用帮助
alias sfd='func_clear_file' 			    # stack file delete，使用-?获取使用帮助
alias clonefile='func_copy_file'                    # 实现文件的多份拷贝，使用-?获取使用帮助
alias clf='func_copy_file'                          # 同 clonefile,使用-?获取使用帮助
alias cat2='func_cat2'                              # cat命令的功能增强版，使用-?获取帮助
alias del='func_del'				    # 文件删除到回收站，使用-?获取帮助
#其它
alias quit='func_quit'				    # 退出
alias notes="func_notes"                            # 记事本，使用-?获取帮助

#-----------------------------------------框架相关--------------------------------------

#alias c2b='c ../../../bin/$PLATFORMCODE/Release/'   # 框架相关
#alias pool_oes_depends='func_pool_oes_depends'      # 框架相关


#export变量导出
export corelib_bin_path_d=$svn_path/basecomponents/projects/corelib/develop/cpp/cpp.corelib.crypt/2.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Debug
export corelib_bin_path_r=$svn_path/basecomponents/projects/corelib/develop/cpp/cpp.corelib.crypt/2.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Release
export crypt_bin_path_d=$svn_path/basecomponents/projects/corelib/develop/cpp/cpp.corelib.crypt/2.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Debug
export crypt_bin_path_r=$svn_path/basecomponents/projects/corelib/develop/cpp/cpp.corelib.crypt/2.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Release

export fstack=/temp/file_transfer_stack 
export fx_path=/opt/FoxitSoftware/FoxitOfficeSuite
export framework_bin_path_d=$svn_path/basecomponents/projects/base/develop/cpp/cpp.eq.framework/2.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Debug
export framework_bin_path_r=$svn_path/basecomponents/projects/base/develop/cpp/cpp.eq.framework/2.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Release

export oes_bin_bath_d=$svn_path/basecomponents/projects/ess/develop/cpp/cpp.ess.oes/1.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Debug
export oes_bin_bath_r=$svn_path/basecomponents/projects/ess/develop/cpp/cpp.ess.oes/1.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Release
export oes_deb_path=$svn_path/basecomponents/projects/ess/setup/oes/1.0/scripts/output
export oes_dpkg_path=$svn_path/basecomponents/projects/ess/setup/oes/1.0/scripts/output
export oes_plugin_path=/opt/DZQZ/tongz/oesplugin/plugins/cpp.ess.oes
export oes_src_path=$svn_path/baseroot/ess/trunk/source/cpp/src/cpp.ess.oes/ess.oes
export ofd_plugin_path=/opt/tongz/readerplugin/plugins/cpp.ess.reader
export ofd_src_path=$svn_path/baseroot/ess/trunk/source/cpp/src/ofd
export oesex_src_path=$svn_path/baseroot/ess/trunk/source/cpp/src/cpp.ess.oes/ess.oes.ex

export path_basecomponents=$svn_path/basecomponents
export path_baseroot=$svn_path/baseroot
export path_corelib_bin=$svn_path/basecomponents/projects/corelib/develop/cpp/cpp.corelib.crypt/2.0.0.1
export path_corelib_src=$svn:_path/baseroot/corelib/trunk/source/cpp/src/cpp.corelib.crypt/
export path_framework_bin=$svn_path/basecomponents/projects/base/develop/cpp/cpp.eq.framework/2.0.0.1
export path_framework_src=$svn_path/baseroot/framework/trunk/source/cpp/src/cpp.eq.framework

export qtview_src_path=$svn_path/baseroot/corelib/trunk/source/cpp/src/cpp.corelib.crypt/corelib.crypt.qtview

#export变量导出2
export corelib_bin_path_d2=$svn2_path/basecomponents/projects/corelib/develop/cpp/cpp.corelib.crypt/2.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Debug
export corelib_bin_path_r2=$svn2_path/basecomponents/projects/corelib/develop/cpp/cpp.corelib.crypt/2.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Release
export crypt_bin_path_d2=$svn2_path/basecomponents/projects/corelib/develop/cpp/cpp.corelib.crypt/2.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Debug
export crypt_bin_path_r2=$svn2_path/basecomponents/projects/corelib/develop/cpp/cpp.corelib.crypt/2.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Release

export framework_bin_path_d2=$svn2_path/basecomponents/projects/base/develop/cpp/cpp.eq.framework/2.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Debug
export framework_bin_path_r2=$svn2_path/basecomponents/projects/base/develop/cpp/cpp.eq.framework/2.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Release

export oes_bin_bath_d2=$svn_path2/basecomponents/projects/ess/develop/cpp/cpp.ess.oes/1.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Debug
export oes_bin_bath_r2=$svn_path2/basecomponents/projects/ess/develop/cpp/cpp.ess.oes/1.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Release
export oes_deb_path2=$svn_path2/basecomponents/projects/ess/setup/oes/1.0/scripts/output
export oes_dpkg_path2=$svn_path2/basecomponents/projects/ess/setup/oes/1.0/scripts/output
export oes_src_path2=$svn_path2/baseroot/ess/trunk/source/cpp/src/cpp.ess.oes/ess.oes
export ofd_src_path2=$svn_path2/baseroot/ess/trunk/source/cpp/src/ofd
export oesex_src_path2=$svn_path2/baseroot/ess/trunk/source/cpp/src/cpp.ess.oes/ess.oes.ex

export path_basecomponents2=$svn_path2/basecomponents
export path_baseroot2=$svn_path2/baseroot
export path_corelib_bin2=$svn2_path/basecomponents/projects/corelib/develop/cpp/cpp.corelib.crypt/2.0.0.1
export path_framework_bin2=$svn_path2/basecomponents/projects/base/develop/cpp/cpp.eq.framework/2.0.0.1
export path_framework_src2=$svn_path2/baseroot/framework/trunk/source/cpp/src/cpp.eq.framework

export qtview_src_path2=$svn_path2/baseroot/corelib/trunk/source/cpp/src/cpp.corelib.crypt/corelib.crypt.qtview
export notes=/temp/$userdir/notes.txt

#函数

func_notes()
{
    if [ "$1" = "-?" -o "$1" = "--help" ]
    then
    	echo "记事本工具，用法：notes [-e/-v/-c/-n] [要记录的内容]"
	echo "如果参数是-e/-v，则用vim编辑器打开记录数据的记事本"
	echo "如果参数是-n或不带参数，则显示记事本内容（带-n时不显示行号）"
	echo "如果参数是-c，则清空记事本"
	echo "如果不是以上控制参数，则将notes之后的内容存放到记事本中"
	echo "也可通过notes变量访问该记事本"
	return
    elif [ "$1" = "-e" -o "$1" = "-v" ]; then
	vim "/temp/$userdir/notes.txt"
    elif [ "$1" = "-c" ]; then
	rm "/temp/$userdir/notes.txt"
	echo "日志已清空"
    elif [ "$1" = "-n" ]; then
	echo "日志内容:"
	cat /temp/$userdir/notes.txt
    elif [[ $# > 0 ]]; then
	echo "$*" >> "/temp/$userdir/notes.txt"
	if [ `whoami` = root ]; then
		chmod 777 "/temp/$userdir/notes.txt"
	fi
    else
	if [ -e /temp/$userdir/notes.txt ]; then	
		echo "日志内容:"
		cat -n /temp/$userdir/notes.txt
	else
		echo "记录为空"
	fi
    fi
}

func_del()
{
    if [ "$1" = "" -o "$1" = "-?" -o "$1" = "--help" ]
    then
	echo "提供文件回收站功能"
	echo "当参数是--clear时，清空回收站"
	echo "当参数是-l/--log时，显示文件删除日志"
	echo "当参数是-c/--cd时，跳转到回收站目录"
	echo "如果是文件或文件夹时，会将其移动到回收站中的日期/时间子目录下"
	echo "在回收站中存放所删除文件的日期/时间目录下，有restore.sh可执行文件"
	echo "执行该文件，会尝试将删除的文件还原到原来的位置"
	echo "该命令可同时删除多个文件，支持*作为参数，表删除该目录下所有文件"
	echo "删除多个文件时，请自行保证文件的存在性，否则可能会导致命令执行出错"
	return
    elif [ "$1" = "--clear" ]; then
	echo "清空回收站"
	rm -rdf /temp/$userdir/dustbin/* 
	echo "文件删除日志:">/temp/$userdir/dustbin/del_log
    elif [ "$1" = "--log" -o "$1" = "-l" ]; then
	cat /temp/$userdir/dustbin/del_log
    elif [ "$1" = "--cd" -o "$1" = "-c" ]; then
	cd /temp/$userdir/dustbin
	echo "回收站目录："
	ls -l
    elif [ ! -e $1 ]; then
	echo "请检查输入参数是否正确"
	return
    else
	day=`date "+%Y%m%d"`
	tim=`date "+%H%M%S"`
	td=`pwd`
	[ ! -e /temp/$userdir/dustbin/$day ] && mkdir /temp/$userdir/dustbin/$day && chmod 777 /temp/$userdir/dustbin/$day
	[ ! -e /temp/$userdir/dustbin/$day/$tim ] && mkdir /temp/$userdir/dustbin/$day/$tim && chmod 777 /temp/$userdir/dustbin/$day/$tim
	mv $* /temp/$userdir/dustbin/$day/$tim
	#echo $td > /temp/$userdir/dustbin/$day/$tim/from_where
	cat>/temp/$userdir/dustbin/$day/$tim/restore.sh<<EOF
day=\`date "+%Y%m%d"\`
tim=\`date "+%H%M%S"\`
[ ! -e $td ] && mkdir -p $td
[ ! -e $td ] && echo "创建文件夹$td失败，无法恢复" && return 1
echo "\${day}_\$tim :" >> /temp/$userdir/dustbin/del_log
echo "  将\`pwd\`目录下的所有文件" >> /temp/$userdir/dustbin/del_log
echo "  恢复到$td文件夹中" >> /temp/$userdir/dustbin/del_log
flag=\`shopt|grep extglob\`
[ "\${flag:0-2}" = "ff" ] && shopt -s extglob
mv -i !(restore.sh) $td
[ "\${flag:0-2}" = "ff" ] && shopt -u extglob
dir=\`pwd\`
cd ${dir%/*}
rm -rdf \$dir
EOF
	chmod 777 /temp/$userdir/dustbin/$day/$tim/restore.sh
	echo "${day}_$tim :" >> /temp/$userdir/dustbin/del_log
	echo "  删除'$td'目录下的 $*" >> /temp/$userdir/dustbin/del_log
	echo "  存在'/temp/$userdir/dustbin/$day/$tim'文件夹中" >> /temp/$userdir/dustbin/del_log
	echo "已删除"
    fi
}

#第一个参数 分隔符
#第二个参数 存储分隔符的变量名
#第三个参数 分割长度被除数
printLine()
{
    outword=$1
    divl=$3
    shellwidth=`stty size|awk '{print $2}'`
    shellwidth2=$[$shellwidth / $divl]

    printf $2= >> /temp/_visual_change_dir.sh
    yes $outword | sed $shellwidth2'q' | tr -d '\n' >> /temp/_visual_change_dir.sh
    echo '' >> /temp/_visual_change_dir.sh
}
#第三个参数 分割长度被除数
printLine2()
{
    if [ "$1" = "-?" -o "$1" = "--help" ]
    then
	echo "功能：绘制分割线，用法：pl [行数] [分割符号]"
        echo "分割符号可以是单个符号，也可以是字符串"
        echo "有些符号有特殊意义，如@、$、&等，可以在这样的符号两边加上引号"
        echo "没法指定*作为分隔符，因为*代表当前路径下的所有文件"
	return
    fi
    if [ -z "$1" ]; then
        repeat_time=1
    else
        repeat_time=$1
    fi
    if [ -z "$2" ]; then
        outword='——'
    else
        outword="$2"
    fi
    divl=${#outword}
    shellwidth=`stty size|awk '{print $2}'`
    shellwidth2=$[$shellwidth  * $repeat_time / $divl]
    yes $outword | sed $shellwidth2'q' | tr -d '\n'
    echo ''
}

func_telopen()
{
  if [ -z "$1" -o "$1" = '-?' -o "$1" = '--help' ]
  then	 
    echo '等价于 export DISPLAY=$1:0'	
    return
  elif [ $1 ]; then
    export DISPLAY=$1:0
  fi
}

#实现文档的多份复制
func_copy_file()
{
  if [ $2 ]
  then
    copies=$2
  else
    copies=1
  fi

  if [ $copies -lt 1 ]
  then
     echo "拷贝份数最少为1份"
     return
  fi

  if [ -z "$1" -o "$1" = "-?" -o "$1" = "--help" ]
  then
     echo "命令用法: clonefile/clf 文件名 [文件拷贝份数，默认为1]"
     return
  else
     filepath=`pwd`/$1
     filename=${filepath%.*}
     extname=${filepath##*.}
     if test -e $filepath
     then
        count=1
	while(( $count<=$copies ))
	do
     	  if test -e "${filename}_${count}.${extname}"
	  then 
		echo "${filename}_${count}.${extname}已存在，跳过"
          else
	    cp $filepath  "${filename}_${count}.${extname}"
	    chmod 777 "${filename}_${count}.${extname}"
	  fi
	  let "count++"
	done	
     else
	echo "$filepath 文件不存在"
     fi

  fi

}

mem_data_list_func()
{
  if [ -z "$1" -o "$1" = "-?" -o "$1" = "--help" ]
  then
    echo "后跟一个路径变量名，路径变量通过m命令产生，功能类似于 ls -l 变量对应路径"
    return 1
  fi	  
  if [ ! -e /temp/memdata_dir/$userdir/$1 ]; then
      echo "变量不存在，请检查变量名是否正确"
      return 1
  fi
  printLine2 1 "——"
  printf "l "
  m $1
  echo ""
  #echo "\$1 变量目录内容:$1"
  mem_data_list_func2 `m $1`
}

mem_data_list_func2()
{
  #echo "$ 1 = $1"
  #l $1
  if [ ! -e $1 ]; then
      echo "变量不存在，请检查变量名是否正确"
      return 1
  fi
  ls -lha --time-style="+%Y/%m/%d %H:%M" $1  
  printLine2 1 "-"
  echo "当前目录: ${PWD}"
  printLine2 1 "="
}

#mc 跳转到变量目录
mem_data_cd_func()
{
  if [ "$1" = "-?" -o "$1" = "--help" ]
  then
    echo "后跟一个路径变量名，路径变量通过m命令产生，功能 : 跳转到该变量对应路径"
    echo "当没有带参数时，默认跳转到default_path"
    echo "注：关于default_path的产生，请参看mm命令的帮助信息"
    return 1
  fi	  
  
  tmp=$1
  if [ -z "$1" ]; then
    echo "没有指定跳转目标，跳转到默认目录default_path"
    tmp="default_path"
  fi

  if [ ! -e /temp/memdata_dir/$userdir/$tmp ]; then
    echo "变量不存在，请检查变量名是否正确"
    return 1
  fi
  source /temp/_visual_change_dir.sh `m $tmp`
}

#mx 将路径变量导出为全局变量
mem_variant_export()
{
  if [ -z "$1" -o "$1" = "-?" -o "$1" = "--help" ]
  then
    echo "后跟一个路径变量名，路径变量通过m命令产生，功能是将路径变量导出为全局变量"
    return 1
  fi	  
  export $1=`m $1`
}
#mm 快速存储当前目录
mem_data_func2()
{
  if [ "$1" = "-?" -o "$1" = "--help" ]
  then
    echo "后跟一个路径变量名，变量名自定，变量存放的值为当前路径，此命令为m命令的简化用法"
    echo "如果mm命令后面不带参数，则等同于 “mm default_path”"
    return 1
  fi	  

  tmp=$1
  if [ -z "$1" ]
  then
    tmp="default_path"
  fi

  mem_data_func $tmp `pwd`
}
#m 路径管理命令
mem_data_func()
{
  #有第三个参数，重命名/错误
  if [ -n "$3" ]
  then
    #重命名变量
    if [ "$1" = "-r" ]
    then
      if [ -e "/temp/memdata_dir/$userdir/$2" ]
      then
        mv -f "/temp/memdata_dir/$userdir/$2" "/temp/memdata_dir/$userdir/$3"
        echo "重命名变量 $2 为 $3"
      else
        echo "变量$2不存在"
      fi
    else
      echo "输入有误，可通过 --help,-?获取帮助"
    fi
  #有第二个参数,存储变量/删除变量
  elif [ -n "$2" ]
  then
    #第二个参数是-d，删除指定变量
    if [ "$1" = "-d" ]
    then
      if [ "$2" = "-" ]
      then
        echo "清除记录的所有变量"
        rm -f /temp/memdata_dir/$userdir/*
      #elif [ -e "/temp/memdata_dir/$userdir/$2" ]
      #then
      else
        echo "清除变量$2"
        rm -f /temp/memdata_dir/$userdir/$2
      #else
      #  echo "变量$2不存在"
      fi
	#存储变量（覆盖已有变量）
    else
      echo $2>/temp/memdata_dir/$userdir/$1  
      echo "$1 = $2"
    fi
  #只有第一个参数(没有第二个参数),显示变量内容或帮助，或清除所有变量
  elif [ -n "$1" ]
  then
    #-c,清除所有变量
    if [ "$1" = "-d" ]
    then
      echo "请指定要删除的变量名或使用-删除所有变量"
      #echo "清除记录的所有变量"
      #rm -f /temp/memdata_dir/$userdir/*
	#显示帮助
    elif [ "$1" = "-?" -o "$1" = "--help" ]
    then
      echo "---------------------------------------------"
      echo "* 命令字 ：列出记录的变量"
      echo "* 命令字 变量名 ：显示变量"
      echo "* 命令字 -?/--help ：显示帮助"
      echo "* 命令字 -d 变量名 ：清除变量"
      echo "* 命令字 -d - ：清除所有记录的变量"
      echo "* 命令字 变量名 字符串 ：存储变量"
      echo "* mc 变量名 : 跳转到存储的变量路径"
      echo "* mm 变量名 ：将当前路径存储到变量"
      echo "* ml 变量名 : 列出变量所代表目录的内容"
      echo "* 命令字 -r 旧变量名 新变量名 : 重命名"
      echo "---------------------------------------------"
	#显示变量
    else
      if [ -e "/temp/memdata_dir/$userdir/$1" ]
      then
        #echo "$1记录的内容为:"
        cat /temp/memdata_dir/$userdir/$1
      else
        echo "该变量不存在"
      fi
    fi
  #没有参数，列出变量
  else
#ls -lA /temp/memdata_dir/$userdir/|grep ^-|awk '{system("var=`cat /temp/memdata_dir/$userdir/$9`")} {print $6 "  " $7 "日  " $8 "  " $9 "  " var}' 
#    ls -lA /temp/memdata_dir/$userdir/|grep ^-|awk '{print $6 "  " $7 "日  " $8 "  " $9}' 
      if  [ "`ls -A /temp/memdata_dir/$userdir`" = "" ]
      then
        echo "变量记录为空"
      else
        echo "记录的变量有:"
	for file in /temp/memdata_dir/$userdir/*
	do
	  [ -d $file ] && continue
	  filename=`basename $file`
	  ll=$[15-${#filename}]
	  printf "$filename  "
	  seq -s '-' $ll | sed 's/[0-9]//g' | tr -d "\n"
	  printf "  "
	  #printf "%-20s" $filename
	  cat $file
	done
      fi
  fi
}
#查看证书
func_look_cert()
{
  if [ -z "$1" -o "$1" = "-?" -o "$1" = "--help" ]
  then
    echo "后跟证书文件名，使用openssl x509命令，展示证书内容"
    return 1
  fi	  
  openssl x509 -in $2 -inform $1 -noout -text
}
# framework文件拉取
func_pool_framework()
{
    \cp -fu $svn_path/basecomponents/projects/base/develop/cpp/cpp.eq.framework/2.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Release/lib* /opt/tongz/oesplugin/plugins/cpp.eq.framework/
    \cp -fu $svn_path/basecomponents/projects/base/develop/cpp/cpp.eq.framework/2.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Release/eqsvc.bin /opt/tongz/oesplugin/plugins/cpp.eq.framework/
    chmod -R 777 /opt/tongz/oesplugin/plugins/cpp.eq.framework
}
# crypt文件拉取
func_pool_crypt()
{
    \cp -rfu $svn_path/basecomponents/projects/corelib/develop/cpp/cpp.corelib.crypt/2.0.0.1/sdk/runtime/$PLATFORMCODE/bin/Release/* /opt/tongz/oesplugin/plugins/cpp.ess.oes/../cpp.corelib.crypt/
    chmod -R 777 /opt/tongz/oesplugin/plugins/cpp.ess.oes/../cpp.corelib.crypt
}
# framework和crypt文件拉取
func_pool_oes_depends()
{
    func_pool_framework
    func_pool_crypt
}

#文件存放的临时栈区, 有待优化，缓存时，使用连接代替拷贝
func_push_file() #sfp
{
    if [ -z "$1" -o "$1" = "-?" -o "$1" = "--help" ]
    then
      echo "stack file push，文件压栈命令"
      echo "后跟一个文件/文件夹路径，文件可以使用绝对路径，"
      echo "也可以使用相对路径，将该文件拷贝到缓存区"
      echo "相关命令：sfg 获取栈文件，sfl 展示栈文件，sfd 删除栈文件"
      return 1
    fi	  
    if [ ! -e $1 ]
    then
	echo "文件或目录不存在，请检查路径是否正确"
	return 1
    fi
    if [ `pwd` = "/" ] ;then 
	tmpdir=""
    else
	tmpdir=`pwd`
    fi
    # 在指令前加上反斜杠，可以忽略掉 alias 的指定选项  
    if [ ${1:0:1} = / ]
    then
	if [ -d $1 ]
	then
	    echo cp -r $1 \$1 >> /temp/file_transfer_stack/$userdir/stack_files_info.sh
	else
	    echo cp $1 \$1 >> /temp/file_transfer_stack/$userdir/stack_files_info.sh
            #\cp $1 /temp/file_transfer_stack/$userdir
	fi
    elif [ ${1:0:2} = ./ ]
    then	    
	if  [ -d $1 ]
	then
	    echo cp -r $tmpdir/${1:2} \$1 >> /temp/file_transfer_stack/$userdir/stack_files_info.sh
	else
	    echo cp $tmpdir/${1:2} \$1 >> /temp/file_transfer_stack/$userdir/stack_files_info.sh
	    #\cp $1 /temp/file_transfer_stack/$userdir
	fi
    else	    
	if  [ -d $1 ]
	then
	    echo cp -r $tmpdir/$1 \$1 >> /temp/file_transfer_stack/$userdir/stack_files_info.sh
	else
	    echo cp $tmpdir/$1 \$1 >> /temp/file_transfer_stack/$userdir/stack_files_info.sh
	    #\cp $1 /temp/file_transfer_stack/$userdir
	fi
    fi 
    #var=$1
    #echo ${var##*/}>>/temp/file_transfer_stack/$userdir/stack_files_info.log
    echo "文件压栈完成"
}
func_show_file()
{
    if [ "$1" = "-?" -o "$1" = "--help" ]; then
	echo "stack file list : 展示栈中的文件"
	echo "相关命令：sfp 文件压栈，sfg 获取栈文件，sfd 删除栈文件"
	return 1
    elif [ -n "$1" ]; then
	echo "无效的参数，该命令只支持-?/--help参数"
	return 1
    fi
    echo "堆栈中的文件:"
    awk -v count=1 '$1=="cp"{
	if($2 == "-r")
		print NR ". [d] " $3 
	else
		print NR ". [f] " $2
	count=count+1}' /temp/file_transfer_stack/$userdir/stack_files_info.sh
}
func_pop_file()
{
    if [ -z $1 -o $1 = "-?" -o $1 = "--help" ]; then
        echo "stack file get ：获取堆栈中的一个或多个文件"
        echo "参数为-时，获取所有文件"
        echo "参数为数字时，获取指定行文件，数字可以为负数，表从尾部开始算起"
        echo "参数为数字时，可以用'数字1,数字2'表示一段范围，获取多个文件"
        echo "参数为数字，且只获取一个文件或文件夹时，支持重命名，新名字通过第二个参数指定"
        echo "相关命令：sfp 文件压栈，sfl 展示栈文件，sfd 删除栈文件"
	return 1
   else 
        rename=""
	if [ ! -z $2 ]; then
	    if [ $1 -gt 0 -o $1 -lt 0 ] 2>/dev/null ; then
	       rename=$2
	    else
	       echo "只在获取单个文件或文件夹时，才可重命名"
	       return 1
	    fi
	fi
        if [ "$1" = "-" ]; then
    	    source /temp/file_transfer_stack/$userdir/stack_files_info.sh `pwd`/$rename
            echo "获取成功"
	else
	    nums=`sed -n '$=' /temp/file_transfer_stack/$userdir/stack_files_info.sh`
	    rng=$1
	    l1=${rng/,*/}
	    l2=${rng/*,/} 
	    if [ $l1 -lt 0 ]; then
	        (( l1 = $nums + $l1 + 1 ))
	    fi
            if [ ! "$l2" = "$l1" ]; then
	        if [ $l2 -lt 0 ]; then
		    (( l2 = $nums + $l2 + 1 ))
	        fi
		if [ $l1 -lt $l2 ]; then
		    rng="$l1,$l2"
		else
		    rng="$l2,$l1"
		fi
	    else
		rng=$l1
	    fi
    	    sed -n "${rng}p" /temp/file_transfer_stack/$userdir/stack_files_info.sh > /tmp/tmp_stack_files_info.sh 2>/dev/null
	    if [ $? = "0" ]; then
    	        source /tmp/tmp_stack_files_info.sh `pwd`/$rename
                echo "获取成功"
            else
                echo "语法错误，请检查参数是否正确"
	        echo "参数为-时，获取所有文件"
	        echo "参数为数字时，获取指定行文件"
        	echo "参数为数字时，可以用'数字1,数字2'表示一段范围，获取多个文件"
            fi
    	    rm /tmp/tmp_stack_files_info.sh
        fi
    fi
}
func_clear_file()
{
    if [ -z $1 -o $1 = "-?" -o $1 = "--help" ]; then
        echo "stack file delete ：删除堆栈中的一个或多个文件"
        echo "参数为-时，删除所有文件"
        echo "参数为数字时，删除指定行文件"
        echo "参数为数字时，可以用'数字1,数字2'表示一段范围，删除多个文件"
        echo "相关命令：sfp 文件压栈，sfl 展示栈文件，sfg 获取栈文件"
	return 1
    else
	if [ "$1" = "-" ]; then
	    : > /temp/file_transfer_stack/$userdir/stack_files_info.sh
            echo "堆栈已清空"
	else
	    sed -i "$1d" /temp/file_transfer_stack/$userdir/stack_files_info.sh 2>/dev/null
	    if [ $? = "0" ]; then
                echo "删除成功"
            else
                echo "语法错误，请检查参数是否正确"
	        echo "参数为-时，删除所有文件"
	        echo "参数为数字时，删除指定行文件"
        	echo "参数为数字时，可以用'数字1,数字2'表示一段范围，删除多个文件"
		return 1
            fi
        fi
    fi
    echo "--------------------------------------"
    func_show_file
}
func_make_visual_change_dir()
{
	#创建文件
	echo '#' > /temp/_visual_change_dir.sh
	printLine "-" "line2" "1"
	printLine "——" "line1" "2"
	printLine "=" "line3" "1"
	echo '
	  cd $1 
  	  echo $line1
	  ls -lhFAX --time-style="+%Y/%m/%d %H:%M"
	  echo $line2
	  printf 当前目录：;pwd
	  echo $line3' >> /temp/_visual_change_dir.sh
	[ `whoami` = root ] && chmod 777 /temp/_visual_change_dir.sh

}
func_make_test_load_so()
{
	echo '#include<dlfcn.h>
	#include<stdio.h>
	int main(int argc,char* argv[])
	{
	  if(argc != 2)
	  {
		printf("falowed by a so file name as the param\n");
		return 0;
	  }
	  void * handle = NULL;
	  printf("test open file %s\n",argv[1]);
	  handle = dlopen(argv[1],RTLD_NOW);
	  if(handle)
	  {
		 printf("load library ok! handle = %p\n",handle);
		 dlclose(handle);
	  }
	  else
	  {
		 printf("load library error : %s\n",dlerror());
	  }
	  return 0;
	}' > /temp/test_load_so.cpp
	#chmod 777 /temp/test_load_so.cpp	
	gcc -Wl,-rpath=.  /temp/test_load_so.cpp -ldl -o /temp/test_load_so.bin
	chmod a+x /temp/test_load_so.bin
	rm /temp/test_load_so.cpp
}
func_call_test_load_so()
{
    if [ -z "$1" -o "$1" = "-?" -o "$1" = "--help" ]
    then
      echo "后跟一个动态库名称，用以测试该动态库是否能正常加载"
      return 1
    fi
	/temp/test_load_so.bin $1
}

func_quit()
{
	count=1
	while(( $count ))
	do
          exit
	  let "count++"
	done	
}
func_updir()
{
    if [ "$1" = "-?" -o "$1" = "--help" ]
    then
      echo "跳转到上级路径：需要一个数字n作为参数，默认为1"
      echo "该命令会从当前路径开始，向上跳n级"
      return 1
    fi
	count=1
	limit=$1
	if [ -z $limit ]; then
	  limit=1
	fi
	tempdir=`pwd`
	while(( $count<=$limit ))
	do
          cd .. 
	  let "count++"
	done	
	tempdir2=`pwd`
	cd $tempdir
	cd $tempdir2
	printLine2 1 "——"
	l
	printLine2 1 "-"
	echo "当前目录: ${PWD}"
	printLine2 1 "="
}
func_uptodir()
{
    if [ -z "$1" -o "$1" = "-?" -o "$1" = "--help" ]
    then
      echo "跳转到上级路径：需要一个名字作为参数，该命令会从当前路径开始，"
      echo "逐级往上查找，直到找到与指定字符串全部匹配或前部匹配的目录，"
      echo "然后跳转到该目录"
      return 1
    fi
	f1=${PWD}
	while(( 1 ))
	do
         cd .. 
	 limit=$1${PWD##*$1}
	 fold=${PWD##*/}
	 #echo limit=$limit
	 #echo flod=$fold
	 if [ "$limit" == "$fold" ];then
	   break 
	 fi	
	done	
	f2=${PWD}
 	cd $f1
	cd $f2	
	printLine2 1 "——"
	l
	printLine2 1 "-"
	echo "当前目录: ${PWD}"
	printLine2 1 "="
}
func_help()
{
   awk '$1=="alias" { 
	sub("=.*","",$2);
	notes=substr($0,index($0,"#"));
	printf("%-20s%s\n",$2,notes);
	}' $BASH_SOURCE | sort
}
func_cat2()
{
    if [ -z "$1" -o "$1" = "-?" -o "$1" = "--help" ]
    then
      echo "功能：显示文件的指定行"
      echo "用法：cat2 [-n] 文件名 [要显示的行]"
      echo "要显示的行号可以是一个数字，也可以用'起始行号,结束行号'表示多行"
      echo "可用\$表最后一行，不指定行号时，默认显示所有行"
      echo "更多的表示行号的方法，可参看sed命令的帮助"
      return 1
    fi
    if [ "$1" = "-n" ]; then
        echo "$3:"
        sed -n "$3p" $2
    else
        sed -n "$2=;$2p" $1 | sed "N;s/\n/ : /"
    fi
}
func_list_func()
{
    if [ -z "$1" -o "$1" = "-?" -o "$1" = "--help" ]
    then
      echo "功能：列出文件中函数所在行，目前只适用于c/c++/java/js类的源文件"
      echo "注意：本功能列出的函数结果仅供参考，可能存在漏选或错选的情况"
      echo "请在命令后指定要检索的文件"
      return 1
    fi	  
    awk '{ 
	if(match($0,/^\s*([a-zA-Z0-9_*<>]+\s+)+[a-zA-Z0-9_*:<>]+\s*\([a-zA-Z0-9_, *<>]*/)>0)
	{
        if(match($0,/^\s*(if|elif|do|for|while)\s*\(/)==0)
	    {
	       if(match($0,/^\s*(else|return)\s+.*/)==0)
	       {print NR" : "$0;}
	    }
	}
    }' $1
}
func_exec_profile()
{
    tmp=`pwd`
    source /etc/profile
    cd $tmp
    export EQ_COMPONENTS=$svn_path/basecomponents
    export EQ_CPP_PUBLIB=$EQ_COMPONENTS/projects/base/develop/cpp/cpp.publib/1.0.0.1/sdk
    #export PS1='${debian_chroot:+($debian_chroot)}\u@\h:\W\$ '
    #export PS1='\e[31m\h\e[33m@\u\e[32m\W:\#\$\e[m '
    export PS1='\e[33m\u@\h:\W:\!\$\e[m '
}

func_make_file_dir()
{
    if [ `whoami` == root ]
    then
        [ ! -d /temp/memdata_dir/$userdir ] && mkdir -p /temp/memdata_dir/$userdir
        chmod -R 777 /temp/memdata_dir
        [ ! -d /temp/file_transfer_stack/$userdir ] && mkdir -p /temp/file_transfer_stack/$userdir && touch /temp/file_transfer_stack/$userdir/stack_files_info.sh 
        [ ! -e /temp/file_transfer_stack/stack_files_info.sh ] && touch /temp/file_transfer_stack/stack_files_info.sh
        chmod -R 777 /temp/file_transfer_stack
	[ ! -d /temp/$userdir/dustbin ] && mkdir /temp/$userdir/dustbin && echo "文件删除日志："> /temp/$userdir/dustbin/del_log
	chmod -R 777 /temp/$userdir/dustbin
        #chmod 777 /temp/memdata_dir/$userdir
        #chmod a+w -R /temp/memdata_dir/
        #[ ! -d /temp/file_transfer_stack ] && mkdir /temp/file_transfer_stack 
        #touch /temp/file_transfer_stack/stack_files_info.log
        #chmod 777 /temp/file_transfer_stack/stack_files_info.log
    else
        [ ! -d /temp/memdata_dir/$userdir ] && mkdir /temp/memdata_dir/$userdir && chmod 777 /temp/memdata_dir/$userdir
        [ ! -d /temp/file_transfer_stack/$userdir ] && mkdir /temp/file_transfer_stack/$userdir && chmod 777 /temp/file_transfer_stack/$userdir && touch /temp/file_transfer_stack/$userdir/stack_files_info.sh && chmod 777 /temp/file_transfer_stack/$userdir/stack_files_info.sh
	[ ! -d /temp/$userdir/dustbin ] && mkdir /temp/$userdir/dustbin && chmod 777 /temp/$userdir/dustbin
	[ ! -e /temp/$userdir/dustbin/del_log ] && echo "文件删除日志："> /temp/$userdir/dustbin/del_log && chmod 777 /temp/$userdir/dustbin/del_log
        #chmod 666 -R /temp/memdata_dir/$userdir
        #mkdir /temp/file_transfer_stack 
        #chmod 777 /temp/file_transfer_stack
    fi
}

if [[ -e /temp ]]
then
   func_make_file_dir
   func_make_visual_change_dir
   func_exec_profile
   echo "----ok----"
elif [[ `whoami` == root ]]
then
   mkdir /temp
   chmod 777 /temp
   func_make_file_dir
   func_make_visual_change_dir
   func_make_test_load_so
   func_exec_profile
   echo "----ok----"
else
   echo 这是第一次执行该脚本，请先切换到管理员身份执行	
fi
#---------change history----------
#"version : 20211115"
#支持用户空间 自定义变量优先存在用户空间中
#优化了ml展示结果，如果变量不存时，给出正确提示
#"version : 20211116"
#修改优化 文件拷贝存储方面的工具函数fsp,fsg,fsd,fsl
#修改lf函数的bug
#"version : 20211124"
#增加了帮助命令hlp
#"version : 20211125"
#增加了cat2命令
#"version : 20211126"
#增加了notes命令和del命令
#"version " 20211129"
#修改notes.txt的存放位置，修改notes显示日志带行号
#"version : 20211206"
#mm ， mc  支持默认变量名 ： default_path
#sfg 支持重命名
#pl 有更详细的说明：特殊符号带引号，分隔符可以为字符串
#eq_component 路径改为基于 $svn_path 的
#sfg 增加支持负数参数
#"version : 20211207"
#优化del，恢复时，不会恢复restore.sh脚本自身，同时删除所在文件夹，并记录恢复日志
