和 sed 命令类似，awk 命令也是逐行扫描文件（从第 1 行到最后一行），寻找含有目标文本的行，如果匹配成功，则会在该行上执行用户想要的操作；反之，则不对行做任何处理。

语法 ： awk [选项] '条件1 {动作 1} 条件 2 {动作 2} …' 文件名

选项	      含义
-F fs	      指定以 fs 作为输入行的分隔符，awk 命令默认分隔符为空格或制表符。
-f file	    从脚本文件中读取 awk 脚本指令，以取代直接在命令行中输入指令。
-v var=val	在执行处理过程之前，设置一个变量 var，并给其设备初始值为 val。

条件类型	  条 件	  说 明
awk保留字	  BEGIN	  在 awk 程序一开始，尚未读取任何数据之前执行。BEGIN 后的动作只在程序开始时执行一次
awk保留字	  END	    在 awk 程序处理完所有数据，即将结束时执行?END 后的动作只在程序结束时执行一次
关系运算符	>	      大于
            <	      小于
            >=	    大于等于
            <=	    小于等于
            ==	    等于。用于判断两个值是否相等。如果是给变童赋值，则使用"=”
            !=	    不等于
            A~B	    判断字符串 A 中是否包含能匹配 B 表达式的子字符串
            A!~B	  判断字符串 A 中是否不包含能匹配 B 表达式的子字符串
正则表达式	/正则/	如果在“//”中可以写入字符，则也可以支持正则表达式

脚本命令格式：
    在 awk 程序执行时，如果没有指定执行动作，则默认会把匹配的行输出；
    如果不指定条件，则默认匹配文本中所有的行。
    
awk 使用数据字段变量
    awk 的主要特性之一是其处理文本文件中数据的能力，
    它会自动给一行中的每个数据元素分配一个变量。
    默认情况下，awk 会将如下变量分配给它在当前行中发现的各个数据字段：
    $0 代表整个文本行；是存放该行各个数据段的数组的引用；
    $1 代表文本行中的第 1 个数据字段；
    $2 代表文本行中的第 2 个数据字段；
    $n 代表文本行中的第 n 个数据字段;
    $NF 代表文本行中的最后一个数据字段;
    这些变量（也包括-v var定义的变量）不但可以用在动作语句中，也可用在条件语句中
    
命令的执行过程是这样的：
1. 如果有 BEGIN 条件，则先执行 BEGIN 定义的动作。
2. 如果没有 BEGIN 条件，则读入第一行，把第一行的数据依次赋予 $0、$1、$2 等变量。
   其中，$0 代表此行的整体数据，$1 代表第一个字段，$2 代表第二个字段。
   依据条件类型判断动作是否执行。如果条件符合，则执行动作；
   如果没有条件，则每行都执行动作。
3. 读入下一行数据，判断条件，执行动作，重复该步骤。
4. 所有行读取完成后，如果有 END 条件，则执行 END 定义的动作。

awk内置变量
ARGC               传给awk程序的命令行参数个数
ARGV               传给awk程序的命令行参数排列
ENVIRON            支持队列中系统环境变量的使用
*FILENAME          awk浏览的文件名
FNR                浏览文件的记录数
FS                 设置输入域分隔符，等价于命令行 -F选项
*NF                该行分割成的字段个数  number field 
*NR                已读的行数   number read
OFS                输出域分隔符
ORS                输出记录分隔符
RS                 控制记录分隔符

动作语句块中使用自定义变量
    在动作中，变量无需预先声明，赋值即定义
    使用变量时也无需特殊标记，只要不在字符串中，就当做变量使用
    且当有多于一个的动作语句块时，在前一个语句块中声明的变量，在后面语句块中仍能使用

动作语句块中的数组
    awk中数组的下标可以是数字和字母，内部使用哈希表存储
    数组的定义与复制： 数组名[key] = value
    数组的使用： 数组名[key]
        
动作语句块中使用流程控制
    条件语句
        if (expression) {
            statement1;
        } else if (expression1) {
            statement2;
        } else {
            statement3;
        }
    循环语句
        awk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，
        这些关键字的语义和C语言中的语义完全相同。

awk的输出函数
    awk中同时提供了print和printf两种打印输出的函数。
    其中print函数的参数可以是变量、数值或者字符串。
    字符串必须用双引号引用，参数用逗号分隔。如果没有逗号，参数就串联在一起而无法区分。
    例：print "filename:" FILENAME ",linenumber:" NR ",columns:" NF ",linecontent:"$0
    其它更多函数的介绍，参：http://blog.sina.com.cn/s/blog_5357c0af0101mito.html
    printf函数的详细用法，参：https://www.jianshu.com/p/2cedb8b0caba
    
在awk中，可以用system调用shell命令。如：awk '{cmd="echo "$0;system(cmd)}'

普通变量：awk -v age=123 'BEGIN{print age}'
使用shell变量赋值：awk -v age=$age 'BEGIN{print age}'

awk 的内置函数（具体参看 man awk）
    运算符
        (...)       Grouping
        $           Field reference.
        ++ --       Increment and decrement, both prefix and postfix.
        ^           Exponentiation (** may also be used, and **= for the assignment operator).
        + - !       Unary plus, unary minus, and logical negation.
        * / %       Multiplication, division, and modulus.
        + -         Addition and subtraction.
        space       String concatenation.
        |   |&      Piped I/O for getline, print, and printf.
        ~ !~        Regular  expression  match,  negated  match. 
        in          Array membership.
        &&          Logical AND.
        ||          Logical OR.
        ?:          The C conditional expression.  
        < > <= >= == !=       The regular relational operators.
        = += -= *= /= %= ^=   Assignment.  
    流程控制
        if (condition) statement [ else statement ]
        while (condition) statement
        do statement while (condition)
        for (expr1; expr2; expr3) statement
        for (var in array) statement
        break
        continue
        delete array[index]
        delete array
        exit [ expression ]
        { statements }
        switch (expression) {
          case value|regex : statement
          ...
          [ default: statement ]
        }
    输入输出
        close(file [, how])  
        getline               
        getline <file         
        getline var           
        getline var <file     
        command | getline [var]
        command |& getline [var]
        next                  
        nextfile              
        print                 
        print expr-list       
        print expr-list >file 
        printf fmt, expr-list 
        printf fmt, expr-list >file
        system(cmd-line)      
        fflush([file])        
        print ... >> file
        print ... | command
        print ... |& command
    数学函数
        atan2(y, x)   Return the arctangent of y/x in radians.
        cos(expr)     Return the cosine of expr, which is in radians.
        exp(expr)     The exponential function.
        int(expr)     Truncate to integer.
        log(expr)     The natural logarithm function.
        rand()        Return a random number N, between zero and one, such that 0 ≤ N < 1.
        sin(expr)     Return the sine of expr, which is in radians.
        sqrt(expr)    Return the square root of expr.
        srand([expr]) Use expr as the new seed for the random number generator. 
    字符串处理（gawk）
        asort(s [, d [, how] ]) 
        asorti(s [, d [, how] ])
        gensub(r, s, h [, t])
        gsub(r, s [, t])
        index(s, t) 
        length([s])   
        match(s, r [, a])
        patsplit(s, a [, r [, seps] ])
        split(s, a [, r [, seps] ])
        sprintf(fmt, expr-list)
        strtonum(str)
        sub(r, s [, t])
        substr(s, i [, n])
        tolower(str)
        toupper(str)
    时间
        mktime(datespec [, utc-flag])
        strftime([format [, timestamp[, utc-flag]]])
        systime()
    位操作
        and(v1, v2 [, ...]) Return the bitwise AND of the values provided in the argument list.  There must be at least two.
        compl(val)          Return the bitwise complement of val.
        lshift(val, count)  Return the value of val, shifted left by count bits.
        or(v1, v2 [, ...])  Return the bitwise OR of the values provided in the argument list.  There must be at least two.
        rshift(val, count)  Return the value of val, shifted right by count bits.
        xor(v1, v2 [, ...]) Return the bitwise XOR of the values provided in the argument list.  There must be at least two.
    类型检查
        isarray(x)          Return true if x is an array, false otherwise.
        typeof(x)           Return a string indicating the type of x.  
                            The string will be one of "array", "number", "regexp", "string", "strnum", or "undefined".
    其它
        bindtextdomain(directory [, domain])
        dcgettext(string [, domain [, category]])
        dcngettext(string1, string2, number [, domain [, category]])
        
    