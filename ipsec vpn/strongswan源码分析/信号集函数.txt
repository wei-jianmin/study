https://zhuanlan.zhihu.com/p/410932421
Linux信号处理机制以及如何触发

信号本质上是在软件层次上对中断机制的一种模拟，其主要有以下几种来源：
    程序错误：除零，非法内存访问…
    外部信号：终端Ctrl-C产生SGINT信号，定时器到期产生SIGALRM…
    显式请求：kill函数允许进程发送任何信号给其他进程或进程组。
进程对信号的响应
    忽略信号：
        大部分信号可被忽略，除SIGSTOP和SIGKILL信号外
        （这是超级用户杀掉或停掉任意进程的手段）。
    捕获信号：
        注册信号处理函数，它对产生的特定信号做处理。
    让信号默认动作起作用：
        unix内核定义的默认动作，有5种情况：
            a) 流产abort：终止进程并产生core文件。
            b) 终止stop：终止进程但不生成core文件。
            c) 忽略：忽略信号。
            d) 挂起suspend：挂起进程。
            e) 继续continue：若进程是挂起的，则resume进程，否则忽略此信号。
注册信号处理函数
    同中断类似，内核也为每个进程准备了一个信号向量表,
    信号向量表中记录着每个信号所对应的处理机制，默认情况下是调用默认处理机制。
    当进程为某个信号注册了信号处理程序后，发生该信号时，内核就会调用注册的函数。
    注册信号处理函数是通过系统调用signal()、sigaction()
    其中signal()在可靠信号系统调用的基础上实现, 是库函数
    它只有两个参数，不支持信号传递信息，主要是用于前32种非实时信号的安装
    而sigaction()是较新的函数（由两个系统调用实现：sys_signal以及sys_rt_sigaction）
    有三个参数，支持信号传递信息，主要用来与 sigqueue() 系统调用配合使用，
    当然，sigaction()同样支持非实时信号的安装。
    sigaction()优于signal()主要体现在支持信号带有参数。
Linux下信号处理机制
    进程如何发现和接受信号？
        信号是异步的，一个进程不可能等待信号的到来，也不知道信号会到来，
        那么，进程是如何发现和接受信号呢？
        实际上，信号的接收不是由用户进程来完成的，而是由内核代理
        当一个进程P2向另一个进程P1发送信号后，
        内核接受到信号，并将其放在P1的信号队列当中。
        当P1再次陷入内核态时，会检查信号队列，
        并根据相应的信号调取相应的信号处理函数。
    信号检测和响应时机
        刚才我们说，当P1再次陷入内核时，会检查信号队列。
        那么，P1什么时候会再次陷入内核呢？
        陷入内核后在什么时机会检测信号队列呢？
        1. 当前进程由于系统调用、中断或异常而进入系统空间以后，
           从系统空间返回到用户空间的前夕。
        2. 当前进程在内核中进入睡眠以后刚被唤醒的时候（必定是在系统调用中），
           或者由于不可忽略信号的存在而提前返回到用户空间。
    进入信号处理函数
        发现信号后，根据信号向量，知道了处理函数，
        那么该如何进入信号处理程序，又该如何返回呢？
        我们知道，用户进程提供的信号处理函数是在用户态里的，
        而我们发现信号，找到信号处理函数的时刻处于内核态中，
        所以我们需要从内核态跑到用户态去执行信号处理程序，执行完毕后还要返回内核态。
        处理信号的整个过程是这样的：
            进程由于系统调用或者中断进入内核，完成相应任务返回用户空间的前夕，检查信号队列，
            如果有信号，则根据信号向量表找到信号处理函数，
            设置好“frame”后，跳到用户态执行信号处理函数。
            信号处理函数执行完毕后，返回内核态，设置“frame”，再返回到用户态继续执行程序
            
==============================================================
https://www.cnblogs.com/52php/p/5815125.html

我们可以通过信号来终止进程，也可以通过信号来在进程间进行通信
程序也可以通过指定信号的关联处理函数来改变信号的默认处理方式，
也可以屏蔽某些信号，使其不能传递给进程

那么我们应该如何设定我们需要处理的信号，我们不需要处理哪些信号等问题呢？
信号集函数就是帮助我们解决这些问题的。

1、int sigemptyset(sigset_t *set);
   该函数的作用是将信号集初始化为空。

2、int sigfillset(sigset_t *set);
   该函数的作用是把信号集初始化包含所有已定义的信号。

3、int sigaddset(sigset_t *set, int signo);
   该函数的作用是把信号signo添加到信号集set中，成功时返回0，失败时返回-1。

4、int sigdelset(sigset_t *set, int signo);
   该函数的作用是把信号signo从信号集set中删除，成功时返回0，失败时返回-1.

5、int sigismember(sigset_t *set, int signo);
   该函数的作用是判断给定的信号signo是否是信号集中的一个成员，
   如果是返回1，如果不是，返回0，如果给定的信号无效，返回-1；

6、int sigpromask(int how, const sigset_t *set, sigset_t *oset);
   该函数可以根据参数指定的方法修改进程的信号屏蔽字。
   新的信号屏蔽字由参数set（非空）指定，而原先的信号屏蔽字将保存在oset（非空）中。
   如果set为空，则how没有意义，但此时调用该函数，
   如果oset不为空，则把当前信号屏蔽字保存到oset中。
   how的取值：
      SIG_BLOCK       把参数sety中的信号添加到信号屏蔽字中
      SIG_SETMASK     把信号屏蔽字设置为参数set中的信号
      SIG_UNBLOCK     从信号屏蔽字中删除参数set中的信号
   如果sigpromask成功完成返回0，如果how取值无效返回-1，并设置errno为EINVAL。
   注意：
      调用这个函数才能改变进程的屏蔽字，
      之前的函数都是为改变一个变量的值而已，
      并不会真正影响进程的屏蔽字

7、int sigpending(sigset_t *set);
   该函数的作用是将被阻塞的信号中停留在待处理状态的一组信号写到参数set指向的信号集中，
   成功调用返回0，否则返回-1，并设置errno表明错误原因。

8、int sigsuspend(const sigset_t *sigmask);
   该函数通过将进程的屏蔽字替换为由参数sigmask给出的信号集，然后挂起进程的执行。
   注意操作的先后顺序，是先替换再挂起程序的执行。
   程序将在信号处理函数执行完毕后继续执行。
   如果接收到信号终止了程序，sigsuspend()就不会返回，
   如果接收到的信号没有终止程序，sigsuspend()就返回-1，并将errno设置为EINTR。
   
使用举例：
   void handler(int sig)
   {
      printf("Handle the signal %d\n", sig);
   }
    
   int main(int argc, char **argv)
   {
      sigset_t sigset;    // 用于记录屏蔽字
      sigset_t ign;       // 用于记录被阻塞(屏蔽)的信号集
      struct sigaction act;
    
      // 清空信号集
      sigemptyset(&sigset);
      sigemptyset(&ign);
    
      // 向信号集中添加 SIGINT
      sigaddset(&sigset, SIGINT);
    
      // 设置处理函数 和 信号集
      act.sa_handler = handler;
      sigemptyset(&act.sa_mask);
      act.sa_flags = 0;
      sigaction(SIGINT, &act, 0);
    
      printf("Wait the signal SIGNAL...\n");
      pause();
    
      // 设置进程屏蔽字, 在本例中为屏蔽 SIGINT
      sigprocmask(SIG_SETMASK, &sigset, 0);
      printf("Please press Ctrl + C in 10 seconds...\n");
      sleep(10);
    
      // 测试 SIGINT 是否被屏蔽
      sigpending(&ign);
      if (sigismember(&ign, SIGINT))
      {
          printf("The SIGINT signal has ignored\n");
      }
    
      // 从信号集中删除信号 SIGINT
      sigdelset(&sigset, SIGINT);
      printf("Wait the signal SIGINT...\n");
    
      // 将进程的屏蔽字重新设置, 即取消对 SIGINT 的屏蔽
      // 并挂起进程
      sigsuspend(&sigset);
    
      printf("The app will exit in 5 secondes!\n");
      sleep(5);
    
      return 0;
   }
   
=====================================================================
https://www.cnblogs.com/52php/p/5813867.html
Linux进程间通信（一）： 信号 signal()、sigaction()
