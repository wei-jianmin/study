NPM的使用及模块介绍
    NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题
    ● 允许用户从NPM服务器下载别人编写的第三方包（js代码包）到本地使用。
    ● 允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。
    ● 允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。
    
    由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。
    同样可以通过输入 "npm -v" 来测试是否成功安装
    如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级，命令如下：
    使用 npm 命令升级npm  : sudo npm install npm -g
    使用 npm 命令安装模块 ：npm install <Module Name> [-g]
    查看安装信息          ：npm list -g
    查看某个模块的版本号  ：npm list <Module Name>
    卸载模块              ：npm uninstall <Module Name>
    更新模块              ：npm update express
    搜索模块              ：npm search express
    
    全局安装与本地安装    : npm 后的 -g 命令控制
        本地安装
            将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），
            如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。
            可以通过 require() 来引入本地安装的包
        全局安装
            将安装包放在 /usr/local 下或者你 node 的安装目录。
             可以直接在命令行里使用
             
     包的属性描述文件（package.json）
        package.json 位于模块的目录下，用于定义包的属性
        Package.json 属性说明
            name            - 包名。
            version         - 包的版本号。
            description     - 包的描述。
            homepage        - 包的官网 url 。
            author          - 包的作者姓名。
            contributors    - 包的其他贡献者姓名。
            dependencies    - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。
                              这里的依赖，指的是生产部署环境的依赖（程序正常运行需要加载的依赖）
            devDependencies - 该模块中所列举的插件属于开发环境的依赖（比如：测试或者文档框架等）
            repository      - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。
            main            - main 字段指定了程序的主入口文件，require('moduleName') 就会加载这个文件。
                              这个字段的默认值是模块根目录下面的 index.js。
            keywords        - 关键字
            
        创建模块
            创建模块，package.json 文件是必不可少的。
            我们可以使用 NPM 生成 package.json 文件，生成的文件包含了基本的结果
            npm init，你需要根据你自己的情况输入。在最后输入 "yes" 后会生成 package.json 文件。
            接下来我们可以使用以下命令在 npm 资源库中注册用户（使用邮箱注册）：$ npm adduser
            接下来我们就用以下命令来发布模块：npm publish
            如果你以上的步骤都操作正确，你就可以跟其他模块一样使用 npm 来安装。
            
        版本号
            使用 NPM 下载和发布代码时都会接触到版本号。NPM 使用语义版本号来管理代码，这里简单介绍一下。
            语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。
            当代码变更时，版本号按以下原则更新。
                如果只是修复bug，需要更新Z位。
                如果是新增了功能，但是向下兼容，需要更新Y位。
                如果有大变动，向下不兼容，需要更新X位。
                
        NPM 常用命令
            除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。
            除了可以在npmjs.org/doc/查看官方文档外，这里再介绍一些NPM常用命令。
            使用npm help可查看所有命令。使用npm help <command>可查看某条命令的详细帮助
            在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试
            使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本
            使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。
            使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人
            使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。