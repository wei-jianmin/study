Node.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。

Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现
    Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，
    每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.
    
观察者模式简介
    "被观察者"维护各"观察者"的接口的列表： std::vector<ObserverInterface*> observers;
    并提供方法可以增加或删除观察者，
    还提供notify方法，遍历调用ObserverInterface的doSomething方法
  
  
Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。
当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。
这个模型非常高效可扩展性非常强，因为 webserver 一直接受请求而不等待任何读写操作
（这也称之为非阻塞式IO或者事件驱动IO）
在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。
在这个过程中，事件相当于一个主题(Subject)，而所有注册到这个事件上的处理函数相当于观察者(Observer)。

Node.js 有多个内置的事件，我们可以通过引入 events 模块，并通过实例化 EventEmitter 类来绑定和监听事件，
如下实例：
    // 引入 events 模块
    var events = require('events');
    // 创建 eventEmitter 对象
    var eventEmitter = new events.EventEmitter();
    // 创建事件处理程序
    var connectHandler = function connected() {
       console.log('连接成功。');
       // 触发 data_received 事件 
       eventEmitter.emit('data_received');
    }
    // 绑定 connection 事件处理程序
    eventEmitter.on('connection', connectHandler);
    // 使用匿名函数绑定 data_received 事件
    eventEmitter.on('data_received', function(){
       console.log('数据接收成功。');
    });
    // 触发 connection 事件 
    eventEmitter.emit('connection');
对上面实例的解读：
    事件对象是被观察者，它内部维护了“多类”观察者列表：
    std::vector<Function> connection、std::vector<Function> data_received
    emit的参数指明了遍历调用哪个列表，所以emit是阻塞的
    注：
        在 Node 应用程序中，执行异步操作的函数将回调函数作为最后一个参数， 
        通常回调函数接收错误对象作为第一个参数（函数也可以不带参数）

EventEmitter 类        
    Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。
    Node.js 里面的许多对象都会分发事件：
    一个 net.Server 对象会在每次有新连接时触发一个事件， 
    一个 fs.readStream 对象会在文件被打开的时候触发一个事件。 
    所有这些产生事件的对象都是 events.EventEmitter 的实例

    events 模块只提供了一个对象： events.EventEmitter。
    EventEmitter 的核心就是事件触发与事件监听器功能的封装。
    
    EventEmitter 对象如果在实例化时发生错误，会触发 error 事件。
    当添加新的监听器时，newListener 事件会触发，
    当监听器被移除时，removeListener 事件被触发。
    举例：
        //event.js 文件
        var EventEmitter = require('events').EventEmitter; 
        var event = new EventEmitter(); 
        event.on('some_event', 
            function() { 
                console.log('some_event 事件触发'); 
            }
        ); 
        setTimeout(function() { 
                event.emit('some_event'); 
            }, 
            1000
        ); 
        
    EventEmitter 的属性介绍
        方法：
            1	addListener(event, listener)
                为指定事件添加一个监听器到监听器数组的尾部。
            2	on(event, listener)
                为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数。
                server.on('connection', function (stream) {
                    console.log('someone connected!');
                });
            3	once(event, listener)
                为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。
                server.once('connection', function (stream) {
                    console.log('Ah, we have our first user!');
                });
            4	removeListener(event, listener)
                移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。
                它接受两个参数，第一个是事件名称，第二个是回调函数名称。
                var callback = function(stream) {
                  console.log('someone connected!');
                };
                server.on('connection', callback);
                // ...
                server.removeListener('connection', callback);
            5	removeAllListeners([event])
                移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。
            6	setMaxListeners(n)
                默认情况下， EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 
                setMaxListeners 函数用于改变监听器的默认限制的数量。
            7	listeners(event)
                返回指定事件的监听器数组。
            8	emit(event, [arg1], [arg2], [...])
                按监听器的顺序执行执行每个监听器，如果事件有注册监听返回 true，否则返回 false。
        类方法
            1.  listenerCount(emitter, event)
                返回指定事件的监听器数量。
        事件
            1	newListener
                event - 字符串，事件名称
                listener - 处理事件函数
                该事件在添加新监听器时被触发。
            2	removeListener
                event - 字符串，事件名称
                listener - 处理事件函数
                从指定监听器数组中删除一个监听器。
        error事件
            EventEmitter 定义了一个特殊的事件 error，它包含了错误的语义，
            我们在遇到 异常的时候通常会触发 error 事件。
            当 error 被触发时，EventEmitter 规定如果没有响应的监听器，
            Node.js 会把它当作异常，退出程序并输出错误信息。
            我们一般要为会触发 error 事件的对象设置监听器，避免遇到错误后整个程序崩溃
        继承 EventEmitter
            大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。
            包括 fs、net、 http 在内的，
            只要是支持事件响应的核心模块都是 EventEmitter 的子类。
            为什么要这样做呢？原因有两点：
            首先，具有某个实体功能的对象实现事件符合语义，事件的监听和发生应该是一个对象的方法。
            其次 JavaScript 的对象机制是基于原型的，
            支持部分多重继承，继承 EventEmitter 不会打乱对象原有的继承关系。