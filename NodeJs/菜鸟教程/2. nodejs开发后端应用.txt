如果我们使用 PHP 来编写后端的代码，需要 Apache 或者 Nginx 的 HTTP 服务器（需配上 mod_php5 模块和 php-cgi）
从这个角度看，不需要专门编写PHP代码，来完成"接收 HTTP 请求并提供 Web 页面"的工作
不过对 Node.js 来说，概念完全不一样了。使用 Node.js 时，我们不仅仅 在实现一个应用，同时还实现了整个 HTTP 服务器。

NodeJs创建一个应用
    在我们创建 Node.js 第一个 "Hello, World!" 应用前，让我们先了解下 Node.js 应用是由哪几部分组成的
    1.  引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。
    2.  创建服务器：服务器可以监听客户端的请求，类似于 Apache 、Nginx 等 HTTP 服务器。
    3.  接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，
        服务器接收请求后返回响应数据。
    步骤一、引入 required 模块
        我们使用 require 指令来载入 http 模块，并将实例化的 HTTP 赋值给变量 http，实例如下:
        var http = require("http");   //载入一个模块（加载一个对象）
    步骤二、创建服务器，接收请求与响应请求
        使用 http.createServer() 方法创建服务器，并使用 listen 方法绑定 8888 端口。 
        函数通过 request, response 参数来接收和响应数据。
        
        var http = require('http');
        http.createServer(   //注意 js 区分大小写
            function (request, response) {
                // 发送 HTTP 头部 HTTP，状态值: 200 : OK， 内容类型: text/plain
                response.writeHead(200, {'Content-Type': 'text/plain'});
                // 发送响应数据 "Hello World"
                response.end('Hello World\n');
            }
        ).listen(8888);   //非阻塞的
        console.log('Server running at http://127.0.0.1:8888/');
    步骤三、启动服务
        node server.js
    经过上面的步骤，就可以在浏览器中访问 http://127.0.0.1:8888，页面会显示：Hello World
    
