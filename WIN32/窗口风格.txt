窗口风格(Window style)--------CreateWindow函数的参数选项
 
WS_BORDER   有边框窗口
 
WS_CAPTION   必须和WS_BORDER风格配合，但不能与WS_DLGFRAME风格一起使用。指示窗口包含标题要部分。
（很明显，其中的WS_CAPTION就是多余的，因为它是由WS_BORDER和WS_DLGFRAME组成的，去掉它对窗口没有任何影响）
WS_CHILD   说明窗口为子窗口，不能应用于弹出式窗口风格(WS_POPUP)。
 
WS_CHILDWINDOW   同WS_CHILD。
 
WS_CLIPCHILDREN   绘制父窗口时，不绘制子窗口的裁剪区域。使用在建立父窗口时。
 
WS_CLIPSIBLINGS 剪裁相关的子窗口，这意味着，当一个特定的子窗口接收到重绘消息时，WS_CLIPSIBLINGS风格将在子窗口要重画的区域中去掉与其它子窗口重叠的部分。（如果没有指定WS_CLIPSIBLINGS风格，并且子窗口有重叠，当你在一个子窗口的客户区绘图时，它可能会画在相邻的子窗口的客户区中。）只与WS_CHILD风格一起使用。
 
WS_DISABLED 创建一个初始状态为禁止的窗口。
 
WS_DLGFRAME 创建一个窗口，具有双重边界，但是没有标题条。
 
WS_GROUP 指定一组控件中的第一个，用户可以用箭头键在这组控件中移动。在第一个控件后面把WS_GROUP风格设置为FALSE的控件都属于这一组。下一个具有WS_GROUP风格的控件将开始下一组（这意味着一个组在下一组的开始处结束）。
 
WS_HSCROLL 创建一个具有水平滚动条的窗口。
 
WS_ICONIC：创建一个初始状态为最小化状态的窗口。与WS_MINIMIZE风格相同。
 
WS_MAXIMIZE 创建一个最大化的窗口。
 
WS_MAXIMIZEBOX 创建一个具有最大化按钮的窗口。
 
WS_MINIMIZE 创建一个初始状态为最小化的窗口。仅与WS_OVERLAPPED风格一起使用。
 
WS_MINIMIZEBOX 创建一个具有最小化按钮的窗口。
（WS_MINIMIZEBOX和WS_MAXIMIZEBOX则决定了系统菜单中的最小化，最大化是否可用，以及窗口右上角是否有最大化和最小化按钮，当然这两个标志必须在WS_SYSMENU存在的情况下才有效，否则是没有系统菜单，而且右上角是不会出现任何按钮的。）
 
WS_OVERLAPPED 创建一个重叠窗口。重叠窗口通常具有标题条和边界。默认。
                                                                
WS_OVERLAPPEDWINDOW 创建一个具有WS_OVERLAPPED,WS_CAPTION,WS_SYSMENU,WS_THICKFRAME,WS_MINIMIZEBOX和WS_MAXIMIZEBOX风格的重叠式窗口。
 
WS_POPUP 创建一个弹出式窗口，不能与WS_CHILD风格一起使用。
 
WS_POPUPWINDOW 创建一个具有WS_BORDER，WS_POPUP和WS_SYSMENU风格的弹出窗口。为了使控制菜单可见，必须与WS_POPUPWINDOW一起使用WS_CAPTION风格。
 
WS_SIZEBOX：创建一个可调边框的窗口，与WS_THICKFRAME风格相同。
 
WS_SYSMENU 创建一个在标题条上具有控制菜单的窗口。仅对带标题条的窗口使用。
(WS_SYSTMENU决定了窗口是否有系统菜单，当然在有标题栏的窗口中，这个标志还决定了窗口左上角的小图标是否存在，以及右上角的按钮是否存在（关闭按钮）)
 
WS_TABSTOP 指定了一些控件中的一个，用户可以通过TAB键来移过它。TAB键使用户移动到下一个用WS_TABSTOP风格定义的控件。
 
WS_THICKFRAME 创建一个具有厚边框的窗口，可以通过厚边框来改变窗口大小。
{ WS_THICKFRAME决定了窗口边缘是否可以拖拽}
WS_TILED：产生一个层叠的窗口。一个层叠的窗口有一个标题和一个边框。与WS_OVERLAPPED风格相同。
 
WS_TILEDWINDOW:创建一个具有WS_OVERLAPPED,WS_CAPTION,WS_SYSMENU,MS_THICKFRAME风格的窗口。
 
WS_VISIBLE 创建一个最初可见的窗口。
 
WS_VSCROLL 创建一个具有垂直滚动条的窗口。
 
扩展窗口风格(Extended window style)
 
WS_EX_ACCEPTFILES 指明用这个风格创建的窗口能够接受拖放文件。
 
WS_EX_APPWINDOW - 当窗口可见时将一个顶层窗口放置在任务栏上。
 
WS_EX_CLIENTEDGE 指明窗口具有3D外观，这意味着，边框具有下沉的边界。
 
WS_EX_CONTEXTHELP 在窗口的标题条中包含问号。当用户单击问号时，鼠标光标的形状变为带指针的问号。如果用户随后单击一个子窗口，子窗口将接收到一个WM_HELP消息。
 
WS_EX_CONTROLPARENT 允许用户用TAB键遍历窗口的子窗口。
 
WS_EX_DLGMODALFRAME 指明一个具有双重边界的窗口，当你在dwStyle参数中指定了WS_CAPTION风格标志时，它可以具有标题条（可选）。
 
WS_EX_LEFT 指定窗口具有左对齐属性。这是缺省值。
 
WS_EX_LEFTSCROLLBAR 将垂直滚动条放在客户区的左边。
 
WS_EX_LTRREADING 按照从左到右的方式显示窗口文本。这是缺省方式。
 
WS_EX_MDICHILD 创建一个MDI子窗口。
 
WS_EX_NOPARENTNOTIFY 指定用这个风格创建的子窗口在被创建或销毁的时候将不向父窗口发送WM_PARENTNOTIFY消息。
 
WS_EX_OVERLAPPEDWINDOW 组合了WS_EX_CLIENTEDGE和WS_EX_WIND-OWEDGE风格。
 
WS_EX_PALETTEWINDOW 组合了WS_EX_WINDOWEDGE和WS_EX_TOPMOST风格。
 
WS_EX_RIGHT 赋予窗口右对齐属性。这与窗口类有关。
 
WS_EX_RIGHTSCROLLBAR 将垂直滚动条（如果有）放在客户区的右边。这是缺省方式。
 
WS_EX_RTLREADING 按照从右到左的顺序显示窗口文本。
 
WS_EX_STATICEDGE 创建一个具有三维边界的窗口，用于不接受用户输入的项。
 
WS_EX_TOOLWINDOW 创建一个工具窗口，目的是被用作浮动工具条。工具窗口具有标题条，比通常的标题条要短，窗口的标题是用小字体显示的。工具窗口不出现在任务条或用户按下ALT+TAB时出现的窗口中。
 
WS_EX_TOPMOST 指定用这个风格创建的窗口必须被放在所有非顶层窗口的上面，即使这个窗口已经不处于激活状态，它还是保留在最上面。应用程序可以用SetWindowsPos成员函数来加入或去掉这个属性。
 
WS_EX_TRANSPARENT 指定了用这个风格创建的窗口是透明的。这意味着，在这个窗口下面的任何窗口都不会被这个窗口挡住。用这个风格创建的窗口只有当它下面的窗口都更新过以后才接收WM_PAINT消息。
 
WS_EX_WINDOWEDGE 指定了具有凸起边框的窗口

--------------------------------------------------------------------------------------

类风格：registerWindow的参数选项
 CS_VREDRAW:当窗口水平方向的宽度变化时重绘整个窗口

CS_HREDRAW:当窗口垂直方向的宽度变化时重绘整个窗口

CS_DBLCLKS:指针在属于此类的窗体内部，并且用户双击时，收到一个双击消息到窗体程序

CS_OWNDC:为此类中的每一个窗体分配唯一的设备环境

CS_CLASSDC:分配一个设备环境并被类中的所有窗体共享

CS_PARENTDC:设置子窗口中剪下的矩形到父窗体中，以使子窗体可以在父窗体上绘图

CS_NOCLOSE:关闭按钮不可用

CS_SAVEBITS:保存被此类的一个窗体遮住的屏幕图像的一部分为位图

CS_BYTEALIGNCLIENT:在字节边界（在X方向）上对齐窗体的客户区，影响到在窗体显示时它的宽度和水平位置

CS_BYTEALIGNWINDOW:在字节边界（在X方向）上对齐窗体。影响到在窗体显示时它的宽度和水平位置

CS_GLOBALCLASS:指定此窗体类是一个应用程序全局类
