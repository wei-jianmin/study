句柄是Window编程中很常用的概念，打个比方，你用CreateWindow创建了一个窗口，这个窗口其实并不是你创建的，而是系统替你的创建的，系统为创建这个窗口，它必须要保留很多的和这个窗口相关的数据，这些数据并不是给你用的，而是系统用来维护窗口用的，而句柄就是系统用来找到这个窗口相关数据的一人索引。你向一个API提供一个句柄，比如ShowWindow（HWND）；要显示这个窗口，这个工作还是系统替你做的，它根据你提供的索引，也就是句柄，找到窗口，然后进行相关的处理。所以说，句柄是相关对象的唯一索引。从这一点上看，有点像指针，但是指针的内容是对象的地址，而句柄并不是地址，至于系统内部如何组织数据，如果通过句柄找到对象的，就不太清楚了。另外，你上面所说的实例句柄，一般指的是HINSTANCE，标识这个进程的一个索引，它与窗口并没有什么关系。

指向程序实例基地址的 是实例句柄
指向窗口量地址的是 窗口句柄,
具体使用哪个, 要看你要访问什么.
微软为这些句柄分别 typedef 了各自的类型, HINSTANCE, HWND etc.
本质是一样的.

句柄相当于指针，系统通过映射得到内部资源的地址。句柄本身只是一个整数。

一个模块对应一个实例句柄，程序可以有很多实例句柄啊，Loadlibrary返回的就是，在win32中其实就是模块的加载地址

---------------------------------------

1．模块的概念

一个模块代表的是一个运行中的exe文件或dll文件，用来代表这个文件中所有的代码和资源，磁盘上的文件不是模块，装入内存后运行时就叫做模块。一个应用程序调用其他DLL中的API时，这些DLL文件被装入内存，就产生了不同的模块，为了区分地址空间中的不同模块，每个模块都有一个惟一的模块句柄来标识。Win16，Win16中不同运行程序的地址空间并非是完全隔离的，一个可执行文件运行后形成"模块"，多次加载同一个可执行文件时，这个"模块"是公用的，为了区分多次加载的"拷贝"，就把每个"拷贝"叫做实例，每个实例均用不同的"实例句柄"（hInstance）值来标识它们。但在Win32中，程序运行时是隔离的，每个实例都使用自己私有的4 GB空间，都认为自己是惟一的，不存在一个模块的多个实例的问题，实际上在Win32中，实例句柄就是模块句柄，但很多API原型中用到模块句柄的时候使用的名称还是沿用hInstance，所以我们还是把变量名称取为hInstance。

在C语言的编程中，hInstance通过WinMain由系统传入，WinMain的原型是：

WinMain（hInstance,hPrevInstance,lpzCmdParam,nCmdShow），程序不用自己去获得hInstance，这个过程由C的初始化代码代劳了，但在Win32汇编中hInstance必须自己获取，如果不了解hModule就是hInstance的话，就无法得知如何得到hInstance，因为并没有一个类似于GetInstanceHandle之类的API函数。

2．句柄是什么

随着分析的深入，句柄（handle）一词也出现得频繁起来，"句柄"是什么呢？句柄只是一个数值而已，它的值对程序来说是没有意义的，它只是Windows用来表示各种资源的编号而已，可见只有Windows才知道怎么使用它来引用各种资源。

下面举例说明。屏幕上已经有10个窗口，Windows把它们从1到10编号，应用程序又建立了一个窗口，现在Windows把它编号为11，然后把11当做窗口句柄返回给应用程序，应用程序并不知道11代表的是什么，但在操作窗口的时候，把11当做句柄传给Windows，Windows自然可以根据这个数值查出是哪个窗口。当该窗口关闭的时候，11这个编号作废。第二次运行的时候，如果屏幕上现有5个窗口，那么现在句柄可能就是6了，所以，应用程序并不用关心句柄的具体数值是多少。打个比方，可以把句柄当做是商场中寄放书包时营业员给的纸条，纸条上的标记用户并不知道是什么意思，但把它交还给营业员的时候，她自然会找到正确的书包。

Windows中几乎所有的东西都是用句柄来标识的，文件句柄、窗口句柄、线程句柄和模块句柄等，同样道理，不必关心它们的值究竟是多少，拿来用就是了！

解释二：

在WINDOWS下，模块指的是EXE和DLL等数据加载到内存中的影像，模块句柄又是比较特殊的，它跟一般的句柄不一样，模块句柄指向的就是EXE和DLL等的在内存的位置（就是指向它们的数据起始位置）；进程句柄只是WINDOWS用来标识某个进程的ID值罢了，在内部，WINDOWS使用一种类似MAP的技术来进行映射的，就是通过这个进程句柄来找到指定进程在内存的位置