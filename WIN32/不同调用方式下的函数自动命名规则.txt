函数标记：
以？作为函数开始标记，如果是在类中的函数，用@指定所在类空间
参数开始标记：
@@YG		表明是__stdcall方式
@@YA		表明你是__cdecl方式
@@YI		表明是__fastcall方式
@@QAE		共有类成员函数（thiscall调用方式）
@@IAE		保护类成员函数（thiscall调用方式）
@@AAE		私有类成员函数（thiscall调用方式）
@@QBE		const共有类成员函数（thiscall调用方式）
@@IBE		const保护类成员函数（thiscall调用方式）
@@ABE		const私有类成员函数（thiscall调用方式）
参数结束标记：
@Z，函数返回值视作第一个参数，如果没有参数，以Z作为参数结束标记（没有@）
参数类型:
X			void
D			char
E			unsigned char
F			short
H			int
I			unsigned int
J			long
K			unsigned long、DWORD
M			float
N			double
_N			bool
U			struct （后面跟结构体类型名，以@@为结束标记）
PA			* (指针标记，表明后面一个参数类型是指针)（相同类型指针连续出现，用数字代表出现次数）
PB			const *
AAV1		类实例的引用
ABV1		const类型的引用
--------------------------------------------------------------------------------------------------------------
在C语言中，假设我们有这样的一个函数：int function(int a,int b)
调用时只要用result =function(1,2)这样的方式就可以使用这个函数。但是，当高级语言被编译成计算机可以识别的机器码时，有一个问题就凸现出来：在CPU中，计算机没有办法知道一个函数调用需要多少个、什么样的参数，也没有硬件可以保存这些参数。也就是说，计算机不知道怎么给这个函数传递参数，传递参数的工作必须由函数调用者和函数本身来协调。为此，计算机提供了一种被称为栈的数据结构来支持参数传递。
栈是一种先进后出的数据结构，栈有一个存储区、一个栈顶指针。栈顶指针指向堆栈中第一个可用的数据项（被称为栈顶）。用户可以在栈顶上方向栈中加入数据，这个操作被称为压栈(Push)，压栈以后，栈顶自动变成新加入数据项的位置，栈顶指针也随之修改。用户也可以从堆栈中取走栈顶，称为弹出栈(pop)，弹出栈后，栈顶下的一个元素变成栈顶，栈顶指针随之修改。
       函数调用时，调用者依次把参数压栈，然后调用函数，函数被调用以后，在堆栈中取得数据，并进行计算。函数计算结束以后，或者调用者、或者函数本身修改堆栈，使堆栈恢复原装。
       在参数传递中，有两个很重要的问题必须得到明确说明：
       当参数个数多于一个时，按照什么顺序把参数压入堆栈
       函数调用后，由谁来把堆栈恢复原装
       在高级语言中，通过函数调用约定来说明这两个问题。常见的调用约定有：
stdcall
cdecl
fastcall
thiscall
naked call
1.stdcall调用约定
_stdcall是Pascal程序的缺省调用方式，常常用PASCAL宏来声明这个调用约定，类似的宏还有WINAPI和CALLBACK。通常用于Win32 Api中，函数采用从右到左的压栈方式，自己在退出时清空堆栈。VC将函数编译后会在函数名前面加上下划线前缀，在函数名后加上"@"和参数的字节数。对于“c++”函数，则有所不同。所有的win32 api函数都遵循该约定。
stdcall调用约定声明的语法为(以前文的那个函数为例）：
int __stdcall function(int a,int b)
       stdcall的调用约定意味着：
       1）参数从右向左压入堆栈
       2）函数自身修改堆栈
       3)函数名自动加前导的下划线，后面紧跟一个@符号，其后紧跟着参数的尺寸
       以上述这个函数为例，参数b首先被压栈，然后是参数a，函数调用function(1,2)调用处翻译成汇编语言将变成：
       push 2 第二个参数入栈
push 1 第一个参数入栈
call function 调用参数，注意此时自动把cs:eip入栈
而对于函数自身，则可以翻译为：
       push ebp 保存ebp寄存器，该寄存器将用来保存堆栈的栈顶指针，可以在函数退出时恢复
mov ebp,esp保存堆栈指针
mov eax,[ebp + 8H] 堆栈中ebp指向位置之前依次保存有ebp,cs:eip,a,b,ebp +8指向a
add eax,[ebp + 0CH] 堆栈中ebp + 12处保存了b
mov esp,ebp 恢复esp
pop ebp
ret 8
而在编译时，这个函数的名字被翻译成_function@8
注意不同编译器会插入自己的汇编代码以提供编译的通用性，但是大体代码如此。其中在函数开始处保留esp到ebp中，在函数结束恢复是编译器常用的方法。
从函数调用看，2和1依次被push进堆栈，而在函数中又通过相对于ebp(即刚进函数时的堆栈指针）的偏移量存取参数。函数结束后，ret 8表示清理8个字节的堆栈，函数自己恢复了堆栈。
2.cdecl调用约定
C调用约定（即用__cdecl关键字说明）按从右至左的顺序压参数入栈，由调用者把参数弹出栈。对于传送参数的内存栈是由调用者来维护的（正因为如此，实现可变参数的函数只能使用该调用约定）。另外，在函数名修饰约定方面也有所不同。
_cdecl是C和C＋＋程序的缺省调用方式。每一个调用它的函数都包含清空堆栈的代码，所以产生的可执行文件大小会比调用_stdcall函数的大。函数采用从右到左的压栈方式。VC将函数编译后会在函数名前面加上下划线前缀。是MFC缺省调用约定。
cdecl调用约定又称为C调用约定，是C语言缺省的调用约定，它的定义语法是：
       int function (int a ,int b) //不加修饰就是C调用约定
int __cdecl function(int a,int b)//明确指出C调用约定
在写本文时，出乎我的意料，发现cdecl调用约定的参数压栈顺序是和stdcall是一样的，参数首先由右向左压入堆栈。所不同的是，函数本身不清理堆栈，调用者负责清理堆栈。由于这种变化，C调用约定允许函数的参数的个数是不固定的，这也是C语言的一大特色。对于前面的function函数，使用cdecl后的汇编码变成：
调用处
push 1
push 2
call function
add esp,8 注意：这里调用者在恢复堆栈 被调用函数_function处
push ebp 保存ebp寄存器，该寄存器将用来保存堆栈的栈顶指针，可以在函数退出时恢复
mov ebp,esp 保存堆栈指针
mov eax,[ebp + 8H] 堆栈中ebp指向位置之前依次保存有ebp,cs:eip,a,b,ebp +8指向a
add eax,[ebp +0CH] 堆栈中ebp + 12处保存了b
mov esp,ebp 恢复esp
pop ebp
ret 注意，这里没有修改堆栈
由于参数按照从右向左顺序压栈，因此最开始的参数在最接近栈顶的位置，因此当采用不定个数参数时，第一个参数在栈中的位置肯定能知道，只要不定的参数个数能够根据第一个后者后续的明确的参数确定下来，就可以使用不定参数，例如对于CRT中的sprintf函数，定义为：
int sprintf(char* buffer,const char* format,...)
由于所有的不定参数都可以通过format确定，因此使用不定个数的参数是没有问题的。
3.fastcall
fastcall调用约定和stdcall类似，它意味着：
   函数的第一个和第二个DWORD参数（或者尺寸更小的）通过ecx和edx传递，其他参数通过从右向左的顺序压栈
被调用函数清理堆栈
对于“c”函数或者变量，修饰名以“@”为前缀，然后是函数名，接着是符号“@”及参数的字节数，如函数int   func(int   a, double   b)的修饰名是@func@12。对于“c++”函数，有所不同。未来的编译器可能使用不同的寄存器来存放参数。
其声明语法为：int fastcall function(int a,int b)
4.Thiscall
thiscall是唯一一个不能明确指明的函数修饰，因为thiscall不是关键字。它是C++类成员函数缺省的调用约定。由于成员函数调用还有一个this指针，因此必须特殊处理，thiscall意味着：
参数从右向左入栈
如果参数个数确定，this指针通过ecx传递给被调用者；
如果参数个数不确定，this指针在所有参数压栈后被压入堆栈。
对参数个数不定的，调用者清理堆栈，否则函数自己清理堆栈
5.naked call
这是一个很少见的调用约定，一般程序设计者建议不要使用。编译器不会给这种函数增加初始化和清理代码，更特殊的是，你不能用return返回返回值，只能用插入汇编返回结果。这一般用于实模式驱动程序设计，假设定义一个求和的加法程序，可以定义为：
       __declspec(naked) int add(int a,int b){   __asm mov eax,a   __asm add eax,b   __asm ret }注意，这个函数没有显式的return返回值，返回通过修改eax寄存器实现，而且连退出函数的ret指令都必须显式插入。上面代码被翻译成汇编以后变成：
mov eax,[ebp+8]
add eax,[ebp+12]
ret 8
注意这个修饰是和__stdcall及cdecl结合使用的，前面是它和cdecl结合使用的代码，对于和stdcall结合的代码，则变成：
       __declspec(naked) int __stdcall function(int a,int b){    __asm mov eax,a    __asm add eax,b    __asm ret 8        //注意后面的8}至于这种函数被调用，则和普通的cdecl及stdcall调用函数一致。