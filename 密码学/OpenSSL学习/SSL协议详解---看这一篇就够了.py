参：https://www.cnblogs.com/zywnnblog/p/15150972.html

前言：
    SSL是Netscape于1994年开发的
    目前有三个版本：2、3、3.1，最常用的是第3版，是1995年发布的
    后来又改名为TLS，并依次出现了 TLS1.1 TLS1.2 TLS1.3 TLS3
    这里主要讲的还是SSL协议

SSL协议的三个特性
    ① 鉴别：可选的客户端认证，和强制的服务器端认证。
    ② 完整：传送的消息包括消息完整性检查（使用MAC）。
    ③ 保密：在握手协议中定义了会话密钥后，所有的消息都被加密。
    
SSL的位置
    SSL介于应用层和TCP层之间。
    应用层数据不再直接传递给传输层，而是传递给SSL层，
    SSL层对从应用层收到的数据进行加密，并增加自己的SSL头。

SSL的工作原理
    1、握手协议
        握手协议是客户机和服务器用SSL连接通信时使用的第一个子协议，
        握手协议包括客户机与服务器之间的一系列消息。
        SSL中最复杂的协议就是握手协议。
        该协议允许服务器和客户机相互验证，
        协商加密和MAC算法以及保密密钥，用来保护在SSL记录中发送的数据。
        握手协议是在应用程序的数据传输之前使用的。
        
        每个握手协议包含以下3个字段
            （1）Type：表示10种消息类型之一
            （2）Length：表示消息长度字节数
            （3）Content：与消息相关的参数
            
        握手协议的4个阶段
            参：file://imgs/握手协议的4个阶段.png
            第一阶段 建立安全能力
                SSL握手的第一阶段启动逻辑连接，建立这个连接的安全能力
                首先客户机向服务器发出client hello消息并等待服务器响应，
                随后服务器向客户机返回server hello消息，对client hello消息中的信息进行确认。
                Client hello消息包括Version，Random，Session id，Cipher suite，Compression method等信息
                参：file://imgs/握手的第一阶段.png
                ClientHello 
                    客户发送CilentHello信息，包含如下内容：
                    （1）一个确定会话的会话ID。
                    （2）客户端可以支持的SSL最高版本号
                    （3）一个用于生成主秘密的32字节的随机数。（等会介绍主秘密是什么）
                    （4）一个客户端可以支持的密码套件列表。
                        密码套件格式：
                            每个套件都以“SSL”开头，紧跟着的是密钥交换算法。
                            用“With”这个词把密钥交换算法、加密算法、散列算法分开，
                            例如：
                                SSL_DHE_RSA_WITH_DES_CBC_SHA,
                                表示把DHE_RSA(带有RSA数字签名的暂时Diffie-HellMan)
                                定义为密钥交换算法；
                                把DES_CBC定义为加密算法；
                                把SHA定义为散列算法。
                    （5）一个客户端可以支持的压缩算法列表。
                ServerHello 
                    服务器用ServerHello信息应答客户，包括下列内容
                    （1）会话ID
                    （2）一个SSL版本号。
                        取客户端支持的最高版本号和服务端支持的最高版本号中的较低者。
                    （3）一个用于生成主秘密的32字节的随机数。（客户端一个、服务端一个）
                    （4）从客户端的密码套件列表中选择的一个密码套件
                    （5）从客户端的压缩方法的列表中选择的压缩方法
                这个阶段之后，客户端服务端知道了下列内容：
                    （1）SSL版本
                    （2）密钥交换、信息验证和加密算法
                    （3）压缩方法
                    （4）有关密钥生成的两个随机数。
            第二阶段 服务器鉴别与密钥交换
                服务器启动SSL握手第2阶段，是本阶段所有消息的唯一发送方，客户机是所有消息的唯一接收方。
                参：file://imgs/握手的第二阶段.png
                该阶段分为4步：
                    （a）证书：
                        服务器将数字证书和到根CA整个链发给客户端，使客户端能用服务器证书中的服务器公钥认证服务器。
                    （b）服务器密钥交换（可选）：
                        这里视密钥交换算法而定
                    （c）证书请求：
                        服务端可能会要求客户自身进行验证。
                    （d）服务器握手完成：
                        第二阶段的结束，第三阶段开始的信号
                这里重点介绍一下服务端的验证和密钥交换
                    这个阶段的前面的（a）证书 和（b）服务器密钥交换是基于密钥交换方法的
                    而在SSL中密钥交换算法有6种：
                        无效（没有密钥交换）、
                        RSA、
                        匿名Diffie-Hellman、
                        暂时Diffie-Hellman、
                        固定Diffie-Hellman、
                        Fortezza
                    在阶段1过程客户端与服务端协商的过程中已经确定使哪种密钥交换算法
                    如果协商过程中确定使用RSA交换密钥，
                    则服务器在它的第一个信息中，发送RSA加密/解密公钥证书
                    不过，因为预备主秘密是由客户端在下一个阶段生成并发送的，所以第二个信息是空的。
                    （公钥证书会进行从服务器到客户端的验证）
                    当服务器收到预备主秘密时，它使用私钥进行解密。
                    其他的几种密钥交换算法这里就不介绍了。
                    可以参考Behrouz A.Forouzan著的《密码学与网络安全》
            第三阶段 客户机鉴别与密钥交换
                参：file://imgs/握手的第三阶段.png   
                客户机启动SSL握手第3阶段，是本阶段所有消息的唯一发送方，服务器是所有消息的唯一接收方。
                该阶段分为3步：
                    （a）证书（可选）：
                        为了对服务器证明自身，客户要发送一个证书信息，这是可选的，
                        在IIS中可以配置强制客户端证书认证。
                    （b）客户机密钥交换（Pre-master-secret）：
                        这里客户端将预备主密钥发送给服务端，注意这里会使用服务端的公钥进行加密。
                    （c）证书验证（可选），
                        对预备秘密和随机数进行签名，证明拥有（a）证书的公钥。
            第四阶段 完成
                参：file://imgs/握手的第四阶段.png
        密钥生成的过程
            为了保证信息的完整性和机密性，SSL需要有六个加密材料（合称为会话密钥）：
            客户端(3个)： 一个密钥用于确定身份（HMAC），一个密钥用于对称加密，分组加密还需要一个IV
            服务端(3个)： 一个密钥用于确定身份（HMAC），一个密钥用于对称加密，分组加密还需要一个IV
            注：
                对于非CBC模式的加密算法来说，不需要初始化向量IV
                Session ID 缓存和 Session Ticket 里面保存的是主密钥，而不是会话密钥，
                这样每次会话复用的时候再用双方的随机数和主密钥导出会话密钥，
                从而实现每次加密通信的会话密钥不一样，
                即使一个会话的主密钥泄露了或者被破解了也不会影响到另一个会话。
            file://imgs/从预主密钥计算得到主密钥.png
            file://imgs/从主密钥计算得到密钥材料.png
            file://imgs/从密钥材料上分割出6个加密材料.png
    2、记录协议
        记录协议在客户机和服务器握手成功后使用
        记录协议向SSL连接提供两个服务：
        （1）完整性：握手协议定义了MAC，用于保证消息完整性
        （2）保密性：使用握手协议定义的秘密密钥实现
        file://imgs/记录协议的处理过程.png
        SSL记录的首部：
            类型（type）：
                8位，指明上层协议的类型。 
                    握手协议：22 
                    改变密码规约协议的值:20. 
                    应用数据协议：23
                    告警协议：21 
            版本(version):
                TLS协议版本，长度为16位
            长度（length）:
                加密后数据的长度
            数据分片的密文数据（附带MAC摘要）
    3、警报协议
        客户机和服务器发现错误时，向对方发送一个警报消息。
        如果是致命错误，则算法立即关闭SSL连接，双方还会先删除相关的会话号，秘密和密钥。
        每个警报消息共2个字节，
            第1个字节表示错误类型
                如果是警报，则值为1
                如果是致命错误，则值为2；
            第2个字节制定实际错误类型。

SSL协议可分为两层：
    SSL记录协议（SSL Record Protocol）：
        它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。
    SSL握手协议（SSL Handshake Protocol）：
        它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。

更多：
    TLS1.2 握手包的扩展项
        https://halfrost.com/https-extensions/
    指定SSL记录层是先mac签名，还是先加密
        https://blog.csdn.net/mrpre/article/details/78821807
        关键词：Encrypt-then-Mac
    使用增强的主密钥计算方式
        https://www.cnblogs.com/bigben0123/p/12890869.html
        https://halfrost.com/https-key-cipher/
        关键词：extended_master_secret