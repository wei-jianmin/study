对称密码算法
    针对不同的数据类型与应用环境，对称密码有两种形式：
    序列密码(流密码)--ZUC、SNOW、RC4
        加密过程
            密钥流 生成密钥流的函数(对称密钥,初始向量){}
            密文序列 按位异或函数(明文序列,密钥流){}
        适用范围
            特点是执行速度快，对计算资源占用少，
            适用于嵌入式系统、移动终端，
            也适用于实时性要求高的场景，如语音通信、视频通信
    分组密码(块密码)--SM4、DES、3DES、AES
        电话本模式(Electronic Code Book,ECB)
            加密前，消息按照分组长度分块
            如果消息长度不是分组长度的整数倍，则先填充为整数倍
            加密时，密钥对各个明文分组分别加密，得到密文分组
            不能抵抗分组重放、嵌入、删除等攻击，不推荐使用
            举例：
                如"李四借了张三一万"，按每两个字分组加密，
                得到"LSJLZSYW"(这里以每个字的首字母假代文字编码后的样子),
                则得到密文后，将密文改为"ZSJLLSYW"，照样能还原出一个错误的明文：
                "张三借了李四一万"，这是不可接受的，
                我们希望的是，密文一旦发生改变，应该无法还原成明文。
        密文分组链接模式(Cipher Block chaining，CBC)
            ECB的改进，后一明文分组加密前，先与前一密文分组按位异或
            解密时，除了第一分组，之后的分组解密后还要与前一密文分组异后，才能得到明文
            对于第一个分组，使用IV(初始向量)作为虚拟的前一密文分组，异或后再加解密
            引入IV，可避免ECB那样，每次对相同的明文分组加密，必然生成相同的密文分组的弊端
            加密时，因为每个明文分组的加密，都依赖前一密文分组，所以不能并行计算。
            解密时，每一密文分组与前一密文分组异或，这一步可以并行计算，
            之后对每一密文分组解密，这一步也可以并行计算，所以解密可以并行计算。
        计数器模式(Counter,CRT)
            有n个明文分组Pn
            count=初始值，En encode(count++) :
            即将count++转换得到n个密文分组En
            明文分组与密文分组对应异或，得到最终密文
        分组链接模式(Block Chaining,BC)
        密文反馈模式(Cipher Feedback,CFB)
        输出反馈模式(Output Feedback,OFB)
        带非线性函数的输出反馈模式(Output Feedback with a Nonlinear Function,OFBNLF)
        
ZUC
    ZUC是祖冲之密码算法的拼音缩写(ZU Chongzhi)
    ZUC算法由128位的种子密钥+128位的初始向量共同作用，
    产生32位的密钥流（每一拍时钟产生一个32位的密钥流Z）
        
SM4
    2006年公布，2012年成为密码行业标准，2016年转化为国标GB/T32907。
    数据分组长度为128位，密钥长度也为128位。
    加密算法与解密算法完全一致，如果硬件实现加解密，可以用同一套电路。
    对每一明文分组，都要进行32轮加密，才得到真正的密文分组
        密钥K与明文分组P，经过加密函数变换，生成密文E(也是128位)
        之后，又以E作为新的密钥K’，再与明文分组P，经过加密函数变换，生成密文E’
        之后，右移E’作为新的密钥...
        如此进行32轮计算后，才得到真正的密文分组
        用代码描述为：
            EncodeKey = xxx;
            for(i=0;i<32;i++)
                EncodeKey = enc_func(EncodeKey, Part);
                
                
                
                
                
                
                
                
                