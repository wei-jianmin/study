注释：
单行注释
两个减号是单行注释:
--
多行注释
--[[
 多行注释
 多行注释
 --]]

标识符：
同C，区分大小写

变量：
除非用local显式声明，否则默认是全局的
全局变量不用声明，赋值时自动创建，
没有初始化的变量值为nil，
要删除一个全局变量，将其赋值为nil即可

数据类型：
nil（表无效值，没有分配空间，类似于NULL,false）
boolean
number（双精度浮点型）
string
function（有C或lua编写的函数）
userdata（数据结构，类似于struct）
table（Lua 中的表（table）其实是一个"关联数组"（associative arrays），数组的索引可以是数字或者是字符串。在 Lua 里，table 的创建是通过"构造表达式"来完成，最简单构造表达式是{}，用来创建一个空表。）
thread（标识执行的独立线路，用于协同程序）
可以用type来测试给定点亮或值的数据类型

nil
nil可用于删除全局变量或表变量

string
可用单引号/双引号/双中括号来表示字符串，双中括号中的字符串可以换行，而前两种方式不能换行
在对一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字
使用 # 来计算字符串的长度，放在字符串前面，如 print(#"www.w3cschool.cc")

表：
lua中的表实际是带索引的表
可以直接用{}赋值，{}里面可以有元素，也可以为空，
{ key1 = "val1", key2 = "val2" }
{"red","yello","blue","cyan","black"}
表结构会根据内容自动管理内存空间
表可以指定索引值，索引可以是数字或字符串，值也可以是数字或字符串
当表用{}方式赋值时，他（隐含）的索引为从1开始的数字
访问表的成员时，一般用[]方式索引，如果索引为字符串时，可以用.方式，table.key = table[key]

函数：
在lua中，函数（名）其实也是一个变量，可以进行变量间赋值，也可以用作参数，有点类似宏（带参宏）
匿名函数，即没有名字的函数，如 myfun = function()...end

赋值：
lua支持多变量同时赋值，如a,b=3,4,
x,y=y,x ：把=右边的y，x放到对应寄存器中，然后再把寄存器值放到等号左边对应变量中，
所以该式子能交换x,y的值
当=左右个数不一致时：如果左边的多，则多余的赋值nil，如果右边多，则多余的忽略

循环：
○while循环：
while(condition)
do
   <执行体> 
end
○for循环：
for var=exp1,exp2,exp3 do   //当exp为函数时，只在开始时进行一次性求值
    <执行体>  
end 	
var从exp1变化到exp2，每次变化以exp3为步长递增var，并执行一次"执行体"。
exp3是可选的，如果不指定，默认为1。
○泛型for循环：
for i,v in ipairs(a) 
    <执行体>  
end  
i是数组索引值，v是对应索引的数组元素值。
ipairs是Lua提供的一个迭代器函数，用来迭代数组。
需要用于遍历表结构，类似foreach
○repeat循环
repeat
    <执行体>
until( condition )
○以上循环可以嵌套，可以用break退出循环

函数：
[local] function function_name( argument1, argument2, argument3..., argumentn)
	function_body
	return 返回值
end
函数返回值，Lua语言函数可以返回多个值，每个值以逗号隔开。
所以函数也可以用于多变量赋值语句中,如a,b,c=func()
函数支持可变参数，用...指定，参数放在一个表中，用#获取传入参数个数，例：
function average(...)
   result = 0
   local arg={...}
   for i,v in ipairs(arg) do
      result = result + v
   end
   print("总共传入 " .. #arg .. " 个数")   //..用于隔开，类似于宏中的连接符
   return result/#arg		//返回平均值
end

运算符：
○算数运算符
操作符	描述	实例
+	加法	A + B 输出结果 30
-	减法	A - B 输出结果 -10
*	乘法	A * B 输出结果 200
/	除法	B / A w输出结果 2
%	取余	B % A 输出结果 0
^	乘幂	A^2 输出结果 100
-	负号	-A 输出结果v -10
○关系运算符
操作符	描述								实例
==	等于，检测两个值是否相等，相等返回 true，否则返回 false		(A == B) 为 false。
~=	不等于，检测两个值是否相等，相等返回 false，否则返回 true		(A ~= B) 为 true。
>	大于，如果左边的值大于右边的值，返回 true，否则返回 false		(A > B) 为 false。
<	小于，如果左边的值大于右边的值，返回 false，否则返回 true		(A < B) 为 true。
>=	大于等于，如果左边的值大于等于右边的值，返回 true，否则返回 false	(A >= B) 返回 false。
<=	小于等于，如果左边的值小于等于右边的值，返回 true，否则返回 false	(A <= B) 返回 true
○逻辑运算符
操作符	描述							实例
and	逻辑与操作符。 若 A 为 false，则返回 A，否则返回 B。	(A and B) 为 false。
or	逻辑或操作符。 若 A 为 true，则返回 A，否则返回 B。	(A or B) 为 true。
not	逻辑非操作符。						not(A and B) 
○其它运算符
操作符	描述					实例
..	连接两个字符串				a="hello ",b="world", a..b = "hello world"
#	一元运算符，返回字符串或表的长度。	#"Hello" 返回 5
○优先级
^
not    - (unary)
*      /
+      -
..
<      >      <=     >=     ~=     ==
and
or

多维数组：
当表的元素也为表时，即所谓的多维数组
多为数组的防伪方式，如三维数组：arr[i][j]

迭代器：
