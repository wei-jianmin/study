所有的源文件（.java）文件都在一个目录下，javac一次只能编译一个目录下的多个.java文件，但不包括子目录
同一目录下的不同java文件，通过package指定在不同的包中，如果未指定，默认在unnamed包中
同一包中的源文件可以直接互相访问（即包内访问权限与包间访问权限不同）

---------------------------------------

static语句块：
atic{}(即static块)，会在类被加载的时候执行且仅会被执行一次，一般用来初始化静态变量和调用静态方法
类加载特性 :
      *在虚拟机的生命周期中一个类只被加载一次。
      *类加载的原则：延迟加载，能少加载就少加载，因为虚拟机的空间是有限的。
      *类加载的时机：
      1）第一次创建对象要加载类.
      2）调用静态方法时要加载类,访问静态属性时会加载类。
      3）加载子类时必定会先加载父类。
      4）创建对象引用不加载类.
      5) 子类调用父类的静态方法时
          (1)当子类没有覆盖父类的静态方法时，只加载父类，不加载子类
          (2)当子类有覆盖父类的静态方法时，既加载父类，又加载子类
      6）访问静态常量，如果编译器可以计算出常量的值，则不会加载类,例如:public static final int a =123;否则会加载类,例如:public static final int a = math.PI。

-----------------------------------------

Class类/对象
Class类在java.lang下，同样继承了Object类。
当JVM实例化一个类时，会先看看内存中是否加载过该类。如果有，则直接创建类实例，如果没有，会加载这个类。当加载这个类时，便会参照.class文件，为这个类产生一个Class对象，用来表达（描述）这个类，该类的所有实例都共同拥有这个Class对象，所以它是唯一的。
Class对象是用来创建类的常规对象的，当我们编译一个Java类就会同时产生一个与该类相对应的Class对象(保存在.class文件中,即.java文件编译后的.class文件中)。

-----------------------------------------

java中的import，不同与C++中的#include,而是类似于using namespace ,但区别也是有的，当A.java文件通过import引入了B.java文件，则在javac编译A.java时，如果没有B.class，
会自动先编译B，创建相应的class文件。
class文件一定是放在对应目录下的

-----------------------------------------
查看import的类是出自哪个jar包的方法
ProtectionDomain pd = StringUtils.class.getProtectionDomain(); 
System.out.println(pd.getLocation()); 

-----------------------------------------
访问修饰符：
			类内部	本包	子类	外部包
public		  √		  √		 √		  √
protected	  √		  √		 √		  ×
default		  √		  √		 ×		  ×
private		  √		  ×		 ×		  ×
注意：java的访问控制是停留在编译层的，也就是它不会在.class文件中留下任何的痕迹，只在编译的时候进行访问控制的检查。其实，通过反射的手段，是可以访问任何包下任何类中的成员，例如，访问类的私有成员也是可能的。

-------------------------------------------

转到定义或声明：
ctrl键+鼠标左键