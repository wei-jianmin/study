理解：
接口的定义方法： 
    type 接口名 interface {
        成员函数名列表
    }
    
可以将一个结构体对象，赋值给一个接口变量，
通过接口变量调用接口中的成员方法时，
会将其指向的结构体对象作为 "关联对象"，传给其成员方法

能接收 "关联对象" 的函数（称为实现函数或实现方法）的定义方式：
    func ( 关联对象名 关联对象类型 ) 函数名 (参数...) [返回值] {
        可以访问 "关联对象" 的成员，但修改 "关联对象" 的内容无意义，因为传来的是局部对象
    }
    func ( 关联对象名 *关联对象类型 ) 函数名 (参数...) [返回值] {
        可以修改 "关联对象" 的成员
    }

接口变量的赋值方法（关联结构体对象）：
    接口变量 = new(结构体类型)
    
接口类型变量的本质是指针型变量，
所以一个接口变量可直接赋值为一个结构体对象的地址，或一个指向结构体对象的指针

-------------------------------------------------------------

举例：

package main
import "fmt"

//定义接口
type IStudent interface {
        set_info(name string,age,score int)
        get_info() (string,int,int)
}

//定义数据结构
type Student struct {
        name string
        age int
        score int
}

//定义接口函数实现
func (stu *Student) set_info(name string,age,score int) {
        stu.name=name
        stu.age=age
        stu.score=score
}
func (stu Student) get_info() (string,int,int){
        return stu.name,stu.age,stu.score
}

//主函数
func main(){
        var stu []IStudent

        for i:=0;i<2;i++ {
        stu=append(stu,new(Student))
        }
        stu[0].set_info("张三",19,89)
        stu[1].set_info("李四",17,95)
        
        add_student(&stu,"王五",18,87)
        
        stu=append(stu,&Student{"赵六",18,81})
        //go会根据变量的引用情况自行决定将变量分配在堆上，还是栈上
        //参：https://studygolang.com/articles/7559

        print_students_info(stu)
}

//需使用切片数组的指针类型，才能实现对stu的有效修改
func add_student(stu * []IStudent,name string,age,score int) {
	*stu = append(*stu,new(Student))
	(*stu)[len(*stu)-1].set_info(name,age,score)
}

func print_students_info(stu []IStudent) {
    fmt.Println("学生信息:")
    for k,v := range stu {
        name,age,score := v.get_info()
        fmt.Println(k," : name:",name,"age:",age,"score:",score)
    } 
}

输出结果：
学生信息:
0  : name: 张三 age: 19 score: 89
1  : name: 李四 age: 17 score: 95
2  : name: 王五 age: 18 score: 87
3  : name: 赵六 age: 18 score: 81