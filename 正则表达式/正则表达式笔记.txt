1.完全匹配：
数据要查找的文字
\0nn ASCII代码中八进制代码为nn的字符
\xnn ASCII代码中十六进制代码为nn的字符
\unnnn Unicode代码中十六进制代码为nnnn的字符
\cN ASCII控制字符。比如\cC代表Ctrl+C

2.边界匹配 \b
输入要查找的文字，并在前面/后面添加"\b"(boundary)控制符

3.通配符(预定义字符集)
.   除了换行符以外的任意字符
\d  数字 -digit 
\w  字母、数字、下划线、汉字等 -word
\s  空白（包括空格、制表符、换行符）-span
\t 制表符，-Tab
\r 回车	-return
\v 竖向制表符 -vert
\f 换页符 -footet
\n 换行符
零宽的：
\b  边界（如空格、标点符号之类的）
\<  表示单词的开始
\>  表示单词的结尾
^   整个文本/整行的开始
$   整个文本/整行的结束
\A 字符串开头(类似^，但不受处理多行选项的影响)
\Z 字符串结尾或行尾(不受处理多行选项的影响)
\z 字符串结尾(类似$，但不受处理多行选项的影响)

4.表示重复(限量符)
?      表示前面的一个字符（可以是通配符）重复0-1次
*      表示前面的一个字符（可以是通配符）重复任意次
+      表示前面的一个字符（可以是通配符）重复>1次
{n}    表示前面的一个字符（可以是通配符）重复ｎ次
{n,}   表示前面的一个字符（可以是通配符）重复>=n次
{j,k}  表示前面的一个字符（可以是通配符）重复j-k次

5. 字符转义
有些控制字符,如{}.*+^$\等，当想将这些字符作为普通字符使用时，可在前面添加转义字符\

6. 自定义字符集/字符类[]
[]中可以包含普通字符，也可以包含预定义的通配符,如[a-zA-Z0-9.?!],这里的？当做普通字符用(.有时也会当做普通字符)
=，-，\等，要想表示符号本身，需要在前面加转义符\
┌─────┬─────────────────────────────────────────────┬──────────────────────┐
│     │  在字符类的内部                             │ 在字符类的外部       │
├─────┼─────────────────────────────────────────────┼──────────────────────┤
│ \b  │  表示空格                                   │ 表示边界             │
│ $   │  表示普通的$                                │ 整个文本/整行的结束  │
│ -   │  表示区间(当在开始位置时，表示-本身)        │ 表示-本身            │
│ ^   │  表示本身（当在开始位置时，表示字符集取反） │ 整个文本/整行的开始  │
│ &&  │  逻辑与，表示两个两个区间的交集             │                      │
│     │  如[a-z&&[^c-x]] （java支持）               │                      │
└─────┴─────────────────────────────────────────────┴──────────────────────┘

7.多个搜索条件|
|    表示或，用于连接多个搜索条件，搜索时从左到右判断搜索条件
配合()使用，可以表达局部区域的或

8.括号，里面包含普通字符或通配符（元字符：任何表示其非本身直观意义的字符或字符组合）
  一个括号内部类似于一个子正则式
表示字符组，常配合第4条表示重复的特殊字符使用：
(){3}     表以括号中的多个字符为单位，重复3次
(?<>)     等价于(?''),可以定义带名字的字符组，如(?'ff'abc)  （.net支持）
(?:)      这样定义的字符组，不能被变量引用到--不会记录(到缓存子正则式堆栈),一定程度提示效率
表示边界（零宽断言,边界符），类似\b,^,$这样的功能,特点是比较判断时"不消费"字符：
(?<=exp)  exp作为前边界，类比^, 这被称为反向预搜索，qt的QRegex类不支持该用法，应使用QRegularExpression
(?=exp)   exp作为后边界，类比$，这被称为正向预搜索
(?<!exp)  =~(?<=exp)
(?!exp)   =~(?=exp)
表示注释：
(?#comment) 这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读
交替选择：
配合|使用，表达二选一或多选一的功能，
如gr(a|e)y, 使用字符集方式gr[ae]y效率更高，但"(Mr|Miss) Wang"却是没法用字符集方式替换的
使用嵌套圆括号时的编号：
圆括号嵌套时，编号会按照式子中圆开括号出现的位置依次进行

9.反义
\W  = ~\w = \w集合之外的元素集
\S  = ~\s
\D  = ~\d
\B  = ~\b
[^] = ~[]  如[^abc] = ~[abc]

10.变量，（对记录的子正则式(/分组)的）前向引用
\k<> 表示正则式前面定义的某个命名分组
\x   x代表一个数字，表示正则式前面定义的第x个分组(从1开始),有的语言用$x表示
其实,组号分配还不只那么简单：
分组0对应整个正则表达式
实际上组号分配过程是要从左向右扫描两遍的：
第一遍只给未命名组分配，第二遍只给命名组分配，因此所有命名组的组号都大于未命名的组号。
你可以使用 (?:exp) 这样的语法来剥夺一个分组对组号分配的参与权．

11.贪婪与懒惰
正则式总是匹配尽可能多的字符，这称为贪婪匹配
如果想要懒惰匹配，只需在表示个数的特殊字符后面加上？

12.其它控制字符
\a 报警字符(打印它的效果是电脑嘀一声)
\b 通常是单词分界位置，但如果在字符类里使用代表退格
\e Escape
\G 当前搜索的开头
\p{name} Unicode中命名为name的字符类，例如\p{IsGreek}
(?>exp) 贪婪子表达式
(?<x>-<y>exp) 平衡组
(?im-nsx:exp) 在子表达式exp中改变处理选项
(?im-nsx) 为表达式后面的部分改变处理选项
(?(exp)yes|no) 把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no
(?(exp)yes) 同上，只是使用空表达式作为no
(?(name)yes|no) 如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no
(?(name)yes) 同上，只是使用空表达式作为no

		 ^([A-Za-z]\:[\w\/]*\.pdf)$
示例：
 ^(-?\d+)(\.\d+)?$　    匹配浮点数
 ^[A-Za-z]+$            匹配由26个英文字母组成的字符串
 ^[A-Z]+$　             匹配由26个英文字母的大写组成的字符串
 ^[a-z]+$　　           匹配由26个英文字母的小写组成的字符串
 ^[A-Za-z0-9]+$　　     匹配由数字和26个英文字母组成的字符串
 ^\w+$　　              匹配由数字、26个英文字母或者下划线组成的字符串
 ^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$　　　　 匹配email地址
 ^[A-Za-z]\:([\\\/][^/\:*?"|<>\n]+)+\.pdf$     匹配本地pdf文件
 \/\*.+?\*\/            匹配C++注释
 (http|https):\/\/[\w\-_]+(\.[\w\-_]+)+(\:\d{0,5})?(\/[\w\-\.,@?^=%&:/~\+#])*\.pdf  匹配服务器上的pdf文件