cxarray.cpp:
CV_IMPL IplImage *
cvCreateImage( CvSize size, int depth, int channels )

{

    IplImage *img = cvCreateImageHeader( size, depth, channels );

    assert( img );

    cvCreateData( img );


    return img;

}
==============================================================================
cxarray.cpp
CV_IMPL void
cvCreateData( CvArr* arr )

{

    if( CV_IS_MAT_HDR( arr ))

    {

        size_t step, total_size;

        CvMat* mat = (CvMat*)arr;

        step = mat->step;


        if( mat->data.ptr != 0 )

            CV_Error( CV_StsError, "Data is already allocated" );


        if( step == 0 )

            step = CV_ELEM_SIZE(mat->type)*mat->cols;


        int64 _total_size = (int64)step*mat->rows + sizeof(int) + CV_MALLOC_ALIGN;
 
        total_size = (size_t)_total_size;

        if(_total_size != (int64)total_size)

            CV_Error(CV_StsNoMem, "Too big buffer is allocated" );
 
        mat->refcount = (int*)cvAlloc( (size_t)total_size );

        mat->data.ptr = (uchar*)cvAlignPtr( mat->refcount + 1, CV_MALLOC_ALIGN );

        *mat->refcount = 1;

    }

    else if( CV_IS_IMAGE_HDR(arr))

    {
        IplImage* img = (IplImage*)arr;


        if( img->imageData != 0 )

            CV_Error( CV_StsError, "Data is already allocated" );


        if( !CvIPL.allocateData )

        {

            img->imageData = img->imageDataOrigin = (char*)cvAlloc( (size_t)img->imageSize );

        }

        else

        {

            int depth = img->depth;

            int width = img->width;


            if( img->depth == IPL_DEPTH_32F || img->nChannels == 64 )
            {

                img->width *= img->depth == IPL_DEPTH_32F ? sizeof(float) : sizeof(double);

                img->depth = IPL_DEPTH_8U;

            }


            CvIPL.allocateData( img, 0, 0 );


            img->width = width;

            img->depth = depth;

        }

    }

    else if( CV_IS_MATND_HDR( arr ))
     
    {

        CvMatND* mat = (CvMatND*)arr;

        int i;

        size_t total_size = CV_ELEM_SIZE(mat->type);


        if( mat->data.ptr != 0 )

            CV_Error( CV_StsError, "Data is already allocated" );


        if( CV_IS_MAT_CONT( mat->type ))

        {

            total_size = (size_t)mat->dim[0].size*(mat->dim[0].step != 0 ?
mat->dim[0].step : total_size);

        }

        else

        {

            for( i = mat->dims - 1; i >= 0; i-- )

            {

                size_t size = (size_t)mat->dim[i].step*mat->dim[i].size;


                if( total_size < size )

                    total_size = size;

            }

        }

        
        mat->refcount = (int*)cvAlloc( total_size +
sizeof(int) + CV_MALLOC_ALIGN );

        mat->data.ptr = (uchar*)cvAlignPtr( mat->refcount + 1, CV_MALLOC_ALIGN );

        *mat->refcount = 1;

    }

    else

        CV_Error( CV_StsBadArg, "unrecognized or unsupported array type" );

}
===============================================================================
cxalloc.cpp
CV_IMPL void* cvAlloc( size_t size )

{
 
    return cv::fastMalloc( size );

}
===============================================================================
cxalloc.cpp:	//对fastMalloc的分析：http://www.tuicool.com/articles/beMZRv
void* fastMalloc( size_t size )
	   //#define  CV_MALLOC_ALIGN    16
{

    uchar* udata = (uchar*)malloc(size + sizeof(void*) + CV_MALLOC_ALIGN);

    if(!udata)

        return OutOfMemoryError(size);

    uchar** adata = alignPtr((uchar**)udata + 1, CV_MALLOC_ALIGN);

    adata[-1] = udata;

    return adata;

}
cxcore.hpp:
template<typename _Tp> static inline 
_Tp* alignPtr(_Tp* ptr, int n=(int)sizeof(_Tp))

{

    return (_Tp*)(((size_t)ptr + n-1) & -n);

}
解析：
udata中存放了malloc申请的堆内存的地址，该地址是不具备指针对齐特性的。
申请的内存区域包含3部分结构：
第一部分是个（void*）大小的区域
第二部分是个16字节区域，用于指针对齐转换用
第三部分是参数指定的要申请的区域的大小

alighPtr函数起到指针对齐的功能：它从udata一个指针长度之后的位置开始查起（由(uchar**)udata+1
可以看出），直到找到一个指针对齐的位置，然后把该位置赋值给adata（意为aligned data），并作为
函数返回值。

之后再从adata之前的一个指针长度的区域存入molloc申请的内存区域的首地址（及udata中存的地址）。
更直观的解释参看图“fastMalloc解析”
