/*
 *转换SVG路径参数形式的椭圆为围绕中心点的圆弧
 *参数：
 *圆弧起点x坐标
 *圆弧起点y坐标
 *椭圆x半径
 *椭圆y半径
 *x轴旋转角度
 *大圆弧标志
 *范围标志
 *圆弧终点x坐标
 *圆弧终点y坐标
 *
 *返回一个数组（结构体），包含
 *中点x坐标
 *中点y坐标
 *椭圆x半径
 *椭圆y半径
 *圆弧起始角度
 *圆弧所跨角度
 *x周旋转角度
 */
ssType CDLG_asdDlg::convertArc(DefType x0,DefType y0,
					DefType rx,DefType ry,
					DefType xAngle,
					DefType largeArcFlag,
					DefType sweepFlag,
					DefType x,DefType y)
{
	//第一步：计算当前点和中点之间距离的一半
	//DefType dx2 = (x0 - x)/2.0;
	//DefType dy2 = (y0 - y)/2.0;
	DefType dx2 = (x0 - x)/2.0;
	DefType dy2 = (y0 - y)/2.0;
	//转换角度度数为弧度
	xAngle=PI * ((int)xAngle % 360) / 180.0;
	DefType cosXAngle=cos(xAngle);
	DefType sinXAngle=sin(xAngle);
	//计算x1,y1
	DefType x1=(cosXAngle*dx2 + sinXAngle*dy2);
	DefType y1=(-sinXAngle*dx2+ cosXAngle*dy2);
	//保证半径足够大
	rx=abs(rx);
	ry=abs(ry);
	DefType rxSq=rx*rx;
	DefType rySq=ry*ry;
	DefType x1Sq=x1*x1;
	DefType y1Sq=y1*y1;
	DefType radiiCheck= x1Sq/rxSq + y1Sq/rySq;
	if(radiiCheck>1)
	{
		rx=sqrt(radiiCheck)*rx;
		ry=sqrt(radiiCheck)*ry;
		rxSq=rx*rx;
		rySq=ry*ry;
	}
	//第二步：计算(cx1,cy1)
	DefType sign=(largeArcFlag == sweepFlag)?-1:1;
	DefType sq=((rxSq*rySq)-(rxSq*y1Sq)-(rySq*x1Sq))/
			((rxSq*y1Sq)+(rySq*x1Sq));
	sq=(sq<0)?0:sq;
	DefType coef=(sign*sqrt(sq));
	DefType cx1=coef*((rx*y1)/ry);
	DefType cy1=coef*-((ry*x1)/rx);
	//第三步：根据(cx1,cy1)计算(cx,cy)
	DefType sx2=(x0+x)/2.0;
	DefType sy2=(y0+y)/2.0;
	DefType cx=sx2+(cosXAngle*cx1-sinXAngle*cy1);
	DefType cy=sy2+(sinXAngle*cx1+cosXAngle*cy1);
	//第四步：计算angleStart和angleExtent
	DefType ux=(x1-cx1)/rx;
	DefType uy=(y1-cy1)/ry;
	DefType vx=(-x1-cx1)/rx;
	DefType vy=(-y1-cy1)/ry;
	DefType p,n;
	//计算起始角度
	n=sqrt((ux*ux)+(uy*uy));
	p=ux;//(1*ux)+(0*uy)
	sign=(uy<0)?-1.0:1.0;
	DefType angleStart=180.0*(sign*acos(p/n))/PI;
	//计算角度范围
	n=sqrt((ux*ux+uy*uy)*(vx*vx+vy*vy));
	p=ux*vx+uy*vy;
	sign=(ux*vy-uy*vx<0)?-1.0:1.0;
	DefType angleExtent=180.0*(sign*acos(p/n))/PI;
	if(!sweepFlag&& angleExtent>0)
	{
		angleExtent-=360.0;
	}
	else if(sweepFlag && angleExtent<0)
	{
		angleExtent+=360.0;
	}
	angleExtent = (int)angleExtent%360;
	angleStart = (int)angleStart%360;
	ssType ss={cx,cy,rx,ry,angleStart,angleExtent,xAngle};
	return ss;
}


void CDLG_asdDlg::centeredtosvg(double cx,double cy,double rx,double ry,double theta,double delta,double phi)
{
	double endtheta,phirad;
	double x0,y0,x1,y1,largeArc,sweep;

	//将角度转换为弧度。需要一个单独的变量把phi变为弧度，因此必须保持phi为读书形式用于返回值

	theta = theta*PI/180;
	endtheta = (theta+delta)*PI/180;
	phirad = phi*PI/180;

	//找出起点和终点的坐标
	x0 = cx+cos(phirad)*rx*cos(theta)+sin(-phirad)*ry*sin(theta);
	y0 = cy+sin(phirad)*rx*cos(theta)+cos(phirad)*ry*sin(theta);

	x1 = cx + cos(phirad)*rx*cos(endtheta)+sin(-phirad)*ry*sin(endtheta);
	y1 = cy + sin(phirad)*rx*cos(endtheta)+cos(phirad)*ry*sin(endtheta);

	largeArc = (delta>180)?1:0;
	sweep = (delta>0)?1:0;


	ssType ss;
	//sweep=0;
	ss=convertArc(x0,y0,rx,ry,phi,largeArc,sweep,x1,y1);
}