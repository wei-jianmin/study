BPF过滤语法（Berkeley Packet Filter）
    适用于tcpdump和wireshark

需要以管理员权限运行

[流向] [协议] [ip/port] [not/and/or]
[Direction] [Protocal] [Address:host-net-port-range] : DPA(hnpr)

tcpdump [选项] [src/dst/*dst or src] [tcp/udp/ip/arp/rarp/fddi] [[*host/net/port] ...] [not/!/and/or ...]
    数据流方向 [src/dst/*dst or src]
        默认 dst or src
    过滤协议   [tcp/udp/ip/icmp/arp/rarp/fddi] 
        默认监听所有协议，fddi是链路层协议
    过滤类型   [[*host/net/port/portrange] ...] 
        host域名/ip地址/端口/端口范围 对应参数， 默认为host
        host
            host 后跟具体的地址，可以使域名、ip、mac地址等
            host 前面支持ip关键字，表既可接受域名参数，也可接受ip地址参数，否则只接受域名参数 ？
        net
            后跟ip地址（网段？），并可通过mask进一步指定ip蒙版
            如： net 192.168.3.255 mask 255.255.255.254   则只过滤192.168.3.0 和 192.168.3.1
            后面的ip，除了4短式外，还可是3段式、2段式、1段式， 3段式默认mask 255.255.255.0
            2段式默认mask 255.255.0.0  、 1段式默认mask 255.0.0.0
        portrange
            后跟参数形式为： port1-port2
    多条件     [not/!/and/&&/or/|| ...]
        借助多条件关键字，可以指定多个过滤条件
    选项：
        -A 以ASCII格式打印出所有分组，并将链路层的头最小化。 
        -c 在收到指定的数量的分组后，tcpdump就会停止。 
        -C 在将一个原始分组写入文件之前，检查文件当前的大小是否超过了参数file_size 中指定的大小。
           如果超过了指定大小，则关闭当前文件，然后在打开一个新的文件。
           参数 file_size 的单位是兆字节（是1,000,000字节，而不是1,048,576字节）。 
        -d 将匹配信息包的代码以人们能够理解的汇编格式给出。 
        -dd 将匹配信息包的代码以c语言程序段的格式给出。 
        -ddd 将匹配信息包的代码以十进制的形式给出。 
        -D 打印出系统中所有可以用tcpdump截包的网络接口。 
        -e 在输出行打印出数据链路层的头部信息。 
        -E 用spi@ipaddr algo:secret解密那些以addr作为地址，并且包含了安全参数索引值spi的IPsec ESP分组。 
        -f 将外部的Internet地址以数字的形式打印出来。 
        -F 从指定的文件中读取表达式，忽略命令行中给出的表达式。 
        -i 指定监听的网络接口。 
        -l 使标准输出变为缓冲行形式，可以把数据导出到文件。 
        -L 列出网络接口的已知数据链路。 
        -m 从文件module中导入SMI MIB模块定义。该参数可以被使用多次，以导入多个MIB模块。 
        -M 如果tcp报文中存在TCP-MD5选项，则需要用secret作为共享的验证码用于验证TCP-MD5选选项摘要（详参RFC 2385）。 
        -b 在数据-链路层上选择协议，包括ip、arp、rarp、ipx都是这一层的。
        -n 不把网络地址转换成名字。
        -nn 不进行端口名称的转换。
        -N 不输出主机名中的域名部分。例如，‘nic.ddn.mil‘只输出’nic‘。 
        -t 在输出的每一行不打印时间戳。 
        -O 不运行分组分组匹配（packet-matching）代码优化程序。 
        -P 不将网络接口设置成混杂模式。 
        -q 快速输出。只输出较少的协议信息。 
        -r 从指定的文件中读取包(这些包一般通过-w选项产生)。 
        -S 将tcp的序列号以绝对值形式输出，而不是相对值。 
        -s 从每个分组中读取最开始的snaplen个字节，而不是默认的68个字节。 
        -T 将监听到的包直接解释为指定的类型的报文，常见的类型有rpc（远程过程调用）和snmp（简单网络管理协议；）。 
        -t 不在每一行中输出时间戳。 
        -tt 在每一行中输出非格式化的时间戳。 
        -ttt 输出本行和前面一行之间的时间差。 
        -tttt 在每一行中输出由date处理的默认格式的时间戳。 
        -u 输出未解码的NFS句柄。 
        -v 输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息。 
        -vv 输出详细的报文信息。 
        -w 直接将分组写入文件中，而不是不分析并打印出来。
    常用选项： [ Divv Ann pq ]
        -D 打印出系统中所有可以用tcpdump截包的网络接口。
        -i 指定监听的网络接口。 如果要抓包所有网卡，使用 -i any 
        -n 不把网络地址转换成名字。
        -nn 不进行端口名称的转换。 （如果不加该选项，有时会因无法将端口转为名称，而导致没有输出）
        -q 快速输出。只输出较少的协议信息。 
        -v 输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息。
        -vv 输出详细的报文信息。
        -e 在输出行打印出数据链路层的头部信息（用于查看数据是从mac发出的）。 
        -A 以ASCII格式打印出所有分组，并将链路层的头最小化。 
        -b 在数据-链路层上选择协议，包括ip、arp、rarp、ipx都是这一层的。
        -P 不将网络接口设置成混杂模式。
        -tt 在每一行中输出非格式化的时间戳。 
        -w 将抓取数据包保存到本地文件中（可以在wireshark中打开查看）

举例：
    如果想要获取主机192.168.228.246接收或发出的ssh包，并且不转换主机名使用如下命令： 
    #tcpdump -nn -n src host 192.168.228.246 and port 22 and tcp
    如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令： 
    #tcpdump ip host 210.27.48.1 and ! 210.27.48.2
    
    错误举例：
    tcp host ip 192.163.3.23   错误原因：tcp 层不包含ip地址（但可以使用 tcp port 1196）
    
