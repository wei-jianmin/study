抓包前使用“捕获过滤器”
    在开始捕获之前，即在选择要抓捕的网卡之前，可以设置“捕获过滤器”，
    在“捕获”菜单中，有个“捕获过滤器”的选项，在这个窗口中，可以预定义一些过滤器，
    过滤器的语法可参考 ： https://blog.csdn.net/qq_33242956/article/details/104653252
    点击“捕获过滤器输入框”前面的书签按钮，可以从弹出的列表中快速选用预定义的“捕获过滤器规则”，
    也可以在“捕获过滤器输入框”中按语法格式直接书写“捕获过滤器规则”。

捕获过滤器语法简介
    <Protocol> <Direction> <Host(s)> <Value> <Logical Operations> <Other expression>
    Protocol（协议）：
        大致有ether、fddi、 ip、arp、rarp、decnet、lat、sca、moprc、mopdl、tcp、udp等，如果不指明协议，默认支持全部协议
    Direction（方向）：
        有src、dst、src and dst、src or dst，如果不指明方向，默认使用src or dst
    Host(s)（主机）：
        有net、port、host、portrange，默认使用host
    <Value>
        与<Host(s)>相对应的值，如host对应的值为ip地址，port对应的值为端口号等
    Logical Operations（逻辑运算）：
        有 not and or，not具有最高优先级，and or优先级相同，运算从左向右
        
tcp包分析       
    1. 在握手时，双方协定好每次发送tcp包的大小
    2. 当发送端要给接收端发送很大的数据时，如100M，则数据必然会分为N多个tcp包，从发送端传送给接收端。
       发送端通常会连续发数据tcp包（前后发送的两个包的时间差大概1微秒左右），
       当然发送端也会从 “最近一次从接收端发来的tcp包” 中预先了解接收端的接收缓冲区大小，
       当发送端发送的tcp包累积达到接收端接收缓冲区大小后，发送端就不会再发tcp数据包了，而是等待，
       而在等待之前，发送端发送的最后一个tcp包，也会被wireshark标记为 [TCP Window Full]
       因为发送端不发数据了，接收端等了一会儿（百微秒级）发现没有从发送端发来数据了，
       就给发送端发送一个回应，告诉发送端“我当前正打算处理哪个包(通过ack表明)，我当前的接收缓冲区大小为多少”，
       当接收端回应发送端时，如果发的数据包中表明“我当前的接收缓冲区为0”，wireshark会将该包标记为[TZP ZeroWindow]
       发送端收到这样的包就仍然等待，而之后接收端会在给客户端发送[TCP Window Updata]包，
       表明我这会儿准备好了，我已经有足够的接收缓冲区了，
       并在[TCP Window Updata]包中表明新的接收缓冲区的大小，及我期望接收那个包（通过ack表明）
       然后发送端会再次连续给接收端发送tcp数据包，直到累积大小再次达到接收缓冲区的大小，重复上面流程。
       QTcpSocket文件缓冲区中的数据过大时，经常不等缓冲区中的数据全部发送完毕就停止了（停止发tcp包了），目前还没找到原因
        


